# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PaymentCardAuthenticationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'verification_response': 'str',
        'payer_authentication_response': 'str',
        'authentication_value': 'str',
        'xid': 'str'
    }

    attribute_map = {
        'type': 'type',
        'verification_response': 'verificationResponse',
        'payer_authentication_response': 'payerAuthenticationResponse',
        'authentication_value': 'authenticationValue',
        'xid': 'xid'
    }

    def __init__(self, type=None, verification_response=None, payer_authentication_response=None, authentication_value=None, xid=None):  # noqa: E501
        """PaymentCardAuthenticationResult - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._verification_response = None
        self._payer_authentication_response = None
        self._authentication_value = None
        self._xid = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if verification_response is not None:
            self.verification_response = verification_response
        if payer_authentication_response is not None:
            self.payer_authentication_response = payer_authentication_response
        if authentication_value is not None:
            self.authentication_value = authentication_value
        if xid is not None:
            self.xid = xid

    @property
    def type(self):
        """Gets the type of this PaymentCardAuthenticationResult.  # noqa: E501

        Type of authentication result. For example, 3-D Secure.  # noqa: E501

        :return: The type of this PaymentCardAuthenticationResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentCardAuthenticationResult.

        Type of authentication result. For example, 3-D Secure.  # noqa: E501

        :param type: The type of this PaymentCardAuthenticationResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["SECURE_3D"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verification_response(self):
        """Gets the verification_response of this PaymentCardAuthenticationResult.  # noqa: E501

        Card enrollment result from the Verification Response (VeRes)  # noqa: E501

        :return: The verification_response of this PaymentCardAuthenticationResult.  # noqa: E501
        :rtype: str
        """
        return self._verification_response

    @verification_response.setter
    def verification_response(self, verification_response):
        """Sets the verification_response of this PaymentCardAuthenticationResult.

        Card enrollment result from the Verification Response (VeRes)  # noqa: E501

        :param verification_response: The verification_response of this PaymentCardAuthenticationResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", "U"]  # noqa: E501
        if verification_response not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_response` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_response, allowed_values)
            )

        self._verification_response = verification_response

    @property
    def payer_authentication_response(self):
        """Gets the payer_authentication_response of this PaymentCardAuthenticationResult.  # noqa: E501

        Payer authentication result from Payment Authentication Response (PaRes)  # noqa: E501

        :return: The payer_authentication_response of this PaymentCardAuthenticationResult.  # noqa: E501
        :rtype: str
        """
        return self._payer_authentication_response

    @payer_authentication_response.setter
    def payer_authentication_response(self, payer_authentication_response):
        """Sets the payer_authentication_response of this PaymentCardAuthenticationResult.

        Payer authentication result from Payment Authentication Response (PaRes)  # noqa: E501

        :param payer_authentication_response: The payer_authentication_response of this PaymentCardAuthenticationResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", "U", "A"]  # noqa: E501
        if payer_authentication_response not in allowed_values:
            raise ValueError(
                "Invalid value for `payer_authentication_response` ({0}), must be one of {1}"  # noqa: E501
                .format(payer_authentication_response, allowed_values)
            )

        self._payer_authentication_response = payer_authentication_response

    @property
    def authentication_value(self):
        """Gets the authentication_value of this PaymentCardAuthenticationResult.  # noqa: E501

        Cardholder Authentication Verification Value (CAVV)  # noqa: E501

        :return: The authentication_value of this PaymentCardAuthenticationResult.  # noqa: E501
        :rtype: str
        """
        return self._authentication_value

    @authentication_value.setter
    def authentication_value(self, authentication_value):
        """Sets the authentication_value of this PaymentCardAuthenticationResult.

        Cardholder Authentication Verification Value (CAVV)  # noqa: E501

        :param authentication_value: The authentication_value of this PaymentCardAuthenticationResult.  # noqa: E501
        :type: str
        """
        if authentication_value is not None and len(authentication_value) > 32:
            raise ValueError("Invalid value for `authentication_value`, length must be less than or equal to `32`")  # noqa: E501
        if authentication_value is not None and len(authentication_value) < 20:
            raise ValueError("Invalid value for `authentication_value`, length must be greater than or equal to `20`")  # noqa: E501

        self._authentication_value = authentication_value

    @property
    def xid(self):
        """Gets the xid of this PaymentCardAuthenticationResult.  # noqa: E501

        Authentication ID  # noqa: E501

        :return: The xid of this PaymentCardAuthenticationResult.  # noqa: E501
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this PaymentCardAuthenticationResult.

        Authentication ID  # noqa: E501

        :param xid: The xid of this PaymentCardAuthenticationResult.  # noqa: E501
        :type: str
        """
        if xid is not None and len(xid) > 32:
            raise ValueError("Invalid value for `xid`, length must be less than or equal to `32`")  # noqa: E501
        if xid is not None and len(xid) < 20:
            raise ValueError("Invalid value for `xid`, length must be greater than or equal to `20`")  # noqa: E501

        self._xid = xid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentCardAuthenticationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
