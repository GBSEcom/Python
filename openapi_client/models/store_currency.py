# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.5.0.20211029.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StoreCurrency(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'literal_currency_code': 'str',
        'numeric_currency_code': 'str',
        'decimal_places': 'int',
        'default_currency': 'bool'
    }

    attribute_map = {
        'literal_currency_code': 'literalCurrencyCode',
        'numeric_currency_code': 'numericCurrencyCode',
        'decimal_places': 'decimalPlaces',
        'default_currency': 'defaultCurrency'
    }

    def __init__(self, literal_currency_code=None, numeric_currency_code=None, decimal_places=None, default_currency=None):  # noqa: E501
        """StoreCurrency - a model defined in OpenAPI"""  # noqa: E501

        self._literal_currency_code = None
        self._numeric_currency_code = None
        self._decimal_places = None
        self._default_currency = None
        self.discriminator = None

        if literal_currency_code is not None:
            self.literal_currency_code = literal_currency_code
        if numeric_currency_code is not None:
            self.numeric_currency_code = numeric_currency_code
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if default_currency is not None:
            self.default_currency = default_currency

    @property
    def literal_currency_code(self):
        """Gets the literal_currency_code of this StoreCurrency.  # noqa: E501

        This field contains the ISO alpha currency code.  # noqa: E501

        :return: The literal_currency_code of this StoreCurrency.  # noqa: E501
        :rtype: str
        """
        return self._literal_currency_code

    @literal_currency_code.setter
    def literal_currency_code(self, literal_currency_code):
        """Sets the literal_currency_code of this StoreCurrency.

        This field contains the ISO alpha currency code.  # noqa: E501

        :param literal_currency_code: The literal_currency_code of this StoreCurrency.  # noqa: E501
        :type: str
        """

        self._literal_currency_code = literal_currency_code

    @property
    def numeric_currency_code(self):
        """Gets the numeric_currency_code of this StoreCurrency.  # noqa: E501

        This field contains the ISO numeric currecy code.  # noqa: E501

        :return: The numeric_currency_code of this StoreCurrency.  # noqa: E501
        :rtype: str
        """
        return self._numeric_currency_code

    @numeric_currency_code.setter
    def numeric_currency_code(self, numeric_currency_code):
        """Sets the numeric_currency_code of this StoreCurrency.

        This field contains the ISO numeric currecy code.  # noqa: E501

        :param numeric_currency_code: The numeric_currency_code of this StoreCurrency.  # noqa: E501
        :type: str
        """

        self._numeric_currency_code = numeric_currency_code

    @property
    def decimal_places(self):
        """Gets the decimal_places of this StoreCurrency.  # noqa: E501

        This field indicates the number of decimal places required for this currency.  # noqa: E501

        :return: The decimal_places of this StoreCurrency.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this StoreCurrency.

        This field indicates the number of decimal places required for this currency.  # noqa: E501

        :param decimal_places: The decimal_places of this StoreCurrency.  # noqa: E501
        :type: int
        """

        self._decimal_places = decimal_places

    @property
    def default_currency(self):
        """Gets the default_currency of this StoreCurrency.  # noqa: E501

        This field indicates if this currency is the default currency for queried store.  # noqa: E501

        :return: The default_currency of this StoreCurrency.  # noqa: E501
        :rtype: bool
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """Sets the default_currency of this StoreCurrency.

        This field indicates if this currency is the default currency for queried store.  # noqa: E501

        :param default_currency: The default_currency of this StoreCurrency.  # noqa: E501
        :type: bool
        """

        self._default_currency = default_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreCurrency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
