# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.1.0.20210122.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GenerateCertificateResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_request_id': 'str',
        'api_trace_id': 'str',
        'response_type': 'ResponseType',
        'zip_file': 'str',
        'private_key_password': 'str'
    }

    attribute_map = {
        'client_request_id': 'clientRequestId',
        'api_trace_id': 'apiTraceId',
        'response_type': 'responseType',
        'zip_file': 'zipFile',
        'private_key_password': 'privateKeyPassword'
    }

    def __init__(self, client_request_id=None, api_trace_id=None, response_type=None, zip_file=None, private_key_password=None):  # noqa: E501
        """GenerateCertificateResponse - a model defined in OpenAPI"""  # noqa: E501

        self._client_request_id = None
        self._api_trace_id = None
        self._response_type = None
        self._zip_file = None
        self._private_key_password = None
        self.discriminator = None

        if client_request_id is not None:
            self.client_request_id = client_request_id
        if api_trace_id is not None:
            self.api_trace_id = api_trace_id
        if response_type is not None:
            self.response_type = response_type
        self.zip_file = zip_file
        self.private_key_password = private_key_password

    @property
    def client_request_id(self):
        """Gets the client_request_id of this GenerateCertificateResponse.  # noqa: E501

        Echoes back the value in the request header for tracking.  # noqa: E501

        :return: The client_request_id of this GenerateCertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_request_id

    @client_request_id.setter
    def client_request_id(self, client_request_id):
        """Sets the client_request_id of this GenerateCertificateResponse.

        Echoes back the value in the request header for tracking.  # noqa: E501

        :param client_request_id: The client_request_id of this GenerateCertificateResponse.  # noqa: E501
        :type: str
        """

        self._client_request_id = client_request_id

    @property
    def api_trace_id(self):
        """Gets the api_trace_id of this GenerateCertificateResponse.  # noqa: E501

        Request identifier in API, can be used to request logs from the support team.  # noqa: E501

        :return: The api_trace_id of this GenerateCertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_trace_id

    @api_trace_id.setter
    def api_trace_id(self, api_trace_id):
        """Sets the api_trace_id of this GenerateCertificateResponse.

        Request identifier in API, can be used to request logs from the support team.  # noqa: E501

        :param api_trace_id: The api_trace_id of this GenerateCertificateResponse.  # noqa: E501
        :type: str
        """

        self._api_trace_id = api_trace_id

    @property
    def response_type(self):
        """Gets the response_type of this GenerateCertificateResponse.  # noqa: E501


        :return: The response_type of this GenerateCertificateResponse.  # noqa: E501
        :rtype: ResponseType
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this GenerateCertificateResponse.


        :param response_type: The response_type of this GenerateCertificateResponse.  # noqa: E501
        :type: ResponseType
        """

        self._response_type = response_type

    @property
    def zip_file(self):
        """Gets the zip_file of this GenerateCertificateResponse.  # noqa: E501

        Zip file containing new private key and signed certificate in PKCS#12 and JKS format, encoded in Base64.  # noqa: E501

        :return: The zip_file of this GenerateCertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._zip_file

    @zip_file.setter
    def zip_file(self, zip_file):
        """Sets the zip_file of this GenerateCertificateResponse.

        Zip file containing new private key and signed certificate in PKCS#12 and JKS format, encoded in Base64.  # noqa: E501

        :param zip_file: The zip_file of this GenerateCertificateResponse.  # noqa: E501
        :type: str
        """
        if zip_file is None:
            raise ValueError("Invalid value for `zip_file`, must not be `None`")  # noqa: E501

        self._zip_file = zip_file

    @property
    def private_key_password(self):
        """Gets the private_key_password of this GenerateCertificateResponse.  # noqa: E501

        Password for PKCS#12 / Private Key Password.  # noqa: E501

        :return: The private_key_password of this GenerateCertificateResponse.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this GenerateCertificateResponse.

        Password for PKCS#12 / Private Key Password.  # noqa: E501

        :param private_key_password: The private_key_password of this GenerateCertificateResponse.  # noqa: E501
        :type: str
        """
        if private_key_password is None:
            raise ValueError("Invalid value for `private_key_password`, must not be `None`")  # noqa: E501

        self._private_key_password = private_key_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateCertificateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
