# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BasketItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'description': 'str',
        'unit_price': 'Amount',
        'count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'unit_price': 'unitPrice',
        'count': 'count'
    }

    def __init__(self, id=None, description=None, unit_price=None, count=None):  # noqa: E501
        """BasketItem - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._description = None
        self._unit_price = None
        self._count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if unit_price is not None:
            self.unit_price = unit_price
        if count is not None:
            self.count = count

    @property
    def id(self):
        """Gets the id of this BasketItem.  # noqa: E501

        Item ID  # noqa: E501

        :return: The id of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasketItem.

        Item ID  # noqa: E501

        :param id: The id of this BasketItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this BasketItem.  # noqa: E501

        Item in the basket  # noqa: E501

        :return: The description of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BasketItem.

        Item in the basket  # noqa: E501

        :param description: The description of this BasketItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def unit_price(self):
        """Gets the unit_price of this BasketItem.  # noqa: E501


        :return: The unit_price of this BasketItem.  # noqa: E501
        :rtype: Amount
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this BasketItem.


        :param unit_price: The unit_price of this BasketItem.  # noqa: E501
        :type: Amount
        """

        self._unit_price = unit_price

    @property
    def count(self):
        """Gets the count of this BasketItem.  # noqa: E501

        Total quantity of items  # noqa: E501

        :return: The count of this BasketItem.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this BasketItem.

        Total quantity of items  # noqa: E501

        :param count: The count of this BasketItem.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasketItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
