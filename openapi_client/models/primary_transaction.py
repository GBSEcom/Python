# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PrimaryTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_type': 'TransactionType',
        'store_id': 'str',
        'merchant_transaction_id': 'str',
        'transaction_origin': 'TransactionOrigin',
        'amount': 'Amount',
        'payment_method': 'PaymentMethod',
        'order': 'Order',
        'basket_items': 'list[BasketItem]',
        'split_shipment': 'SplitShipment',
        'additional_details': 'PrimaryTransactionAdditionalDetails',
        'industry_specific_extensions': 'IndustrySpecificExtensions',
        'stored_credentials': 'StoredCredential',
        'purchase_card': 'PurchaseCards',
        'payment_facilitator': 'PaymentFacilitator',
        'soft_descriptor': 'SoftDescriptor'
    }

    attribute_map = {
        'transaction_type': 'transactionType',
        'store_id': 'storeId',
        'merchant_transaction_id': 'merchantTransactionId',
        'transaction_origin': 'transactionOrigin',
        'amount': 'amount',
        'payment_method': 'paymentMethod',
        'order': 'order',
        'basket_items': 'basketItems',
        'split_shipment': 'splitShipment',
        'additional_details': 'additionalDetails',
        'industry_specific_extensions': 'industrySpecificExtensions',
        'stored_credentials': 'storedCredentials',
        'purchase_card': 'purchaseCard',
        'payment_facilitator': 'paymentFacilitator',
        'soft_descriptor': 'softDescriptor'
    }

    def __init__(self, transaction_type=None, store_id=None, merchant_transaction_id=None, transaction_origin=None, amount=None, payment_method=None, order=None, basket_items=None, split_shipment=None, additional_details=None, industry_specific_extensions=None, stored_credentials=None, purchase_card=None, payment_facilitator=None, soft_descriptor=None):  # noqa: E501
        """PrimaryTransaction - a model defined in OpenAPI"""  # noqa: E501

        self._transaction_type = None
        self._store_id = None
        self._merchant_transaction_id = None
        self._transaction_origin = None
        self._amount = None
        self._payment_method = None
        self._order = None
        self._basket_items = None
        self._split_shipment = None
        self._additional_details = None
        self._industry_specific_extensions = None
        self._stored_credentials = None
        self._purchase_card = None
        self._payment_facilitator = None
        self._soft_descriptor = None
        self.discriminator = None

        self.transaction_type = transaction_type
        if store_id is not None:
            self.store_id = store_id
        if merchant_transaction_id is not None:
            self.merchant_transaction_id = merchant_transaction_id
        if transaction_origin is not None:
            self.transaction_origin = transaction_origin
        self.amount = amount
        self.payment_method = payment_method
        if order is not None:
            self.order = order
        if basket_items is not None:
            self.basket_items = basket_items
        if split_shipment is not None:
            self.split_shipment = split_shipment
        if additional_details is not None:
            self.additional_details = additional_details
        if industry_specific_extensions is not None:
            self.industry_specific_extensions = industry_specific_extensions
        if stored_credentials is not None:
            self.stored_credentials = stored_credentials
        if purchase_card is not None:
            self.purchase_card = purchase_card
        if payment_facilitator is not None:
            self.payment_facilitator = payment_facilitator
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor

    @property
    def transaction_type(self):
        """Gets the transaction_type of this PrimaryTransaction.  # noqa: E501


        :return: The transaction_type of this PrimaryTransaction.  # noqa: E501
        :rtype: TransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this PrimaryTransaction.


        :param transaction_type: The transaction_type of this PrimaryTransaction.  # noqa: E501
        :type: TransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def store_id(self):
        """Gets the store_id of this PrimaryTransaction.  # noqa: E501

        An optional outlet ID for clients that support multiple stores in the same app.  # noqa: E501

        :return: The store_id of this PrimaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this PrimaryTransaction.

        An optional outlet ID for clients that support multiple stores in the same app.  # noqa: E501

        :param store_id: The store_id of this PrimaryTransaction.  # noqa: E501
        :type: str
        """
        if store_id is not None and len(store_id) > 20:
            raise ValueError("Invalid value for `store_id`, length must be less than or equal to `20`")  # noqa: E501

        self._store_id = store_id

    @property
    def merchant_transaction_id(self):
        """Gets the merchant_transaction_id of this PrimaryTransaction.  # noqa: E501

        The unique merchant transaction ID from the Request header, if supplied.  # noqa: E501

        :return: The merchant_transaction_id of this PrimaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_transaction_id

    @merchant_transaction_id.setter
    def merchant_transaction_id(self, merchant_transaction_id):
        """Sets the merchant_transaction_id of this PrimaryTransaction.

        The unique merchant transaction ID from the Request header, if supplied.  # noqa: E501

        :param merchant_transaction_id: The merchant_transaction_id of this PrimaryTransaction.  # noqa: E501
        :type: str
        """
        if merchant_transaction_id is not None and len(merchant_transaction_id) > 40:
            raise ValueError("Invalid value for `merchant_transaction_id`, length must be less than or equal to `40`")  # noqa: E501

        self._merchant_transaction_id = merchant_transaction_id

    @property
    def transaction_origin(self):
        """Gets the transaction_origin of this PrimaryTransaction.  # noqa: E501


        :return: The transaction_origin of this PrimaryTransaction.  # noqa: E501
        :rtype: TransactionOrigin
        """
        return self._transaction_origin

    @transaction_origin.setter
    def transaction_origin(self, transaction_origin):
        """Sets the transaction_origin of this PrimaryTransaction.


        :param transaction_origin: The transaction_origin of this PrimaryTransaction.  # noqa: E501
        :type: TransactionOrigin
        """

        self._transaction_origin = transaction_origin

    @property
    def amount(self):
        """Gets the amount of this PrimaryTransaction.  # noqa: E501


        :return: The amount of this PrimaryTransaction.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PrimaryTransaction.


        :param amount: The amount of this PrimaryTransaction.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def payment_method(self):
        """Gets the payment_method of this PrimaryTransaction.  # noqa: E501


        :return: The payment_method of this PrimaryTransaction.  # noqa: E501
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PrimaryTransaction.


        :param payment_method: The payment_method of this PrimaryTransaction.  # noqa: E501
        :type: PaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def order(self):
        """Gets the order of this PrimaryTransaction.  # noqa: E501


        :return: The order of this PrimaryTransaction.  # noqa: E501
        :rtype: Order
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PrimaryTransaction.


        :param order: The order of this PrimaryTransaction.  # noqa: E501
        :type: Order
        """

        self._order = order

    @property
    def basket_items(self):
        """Gets the basket_items of this PrimaryTransaction.  # noqa: E501

        Required for some payment methods (for example, Klarna)  # noqa: E501

        :return: The basket_items of this PrimaryTransaction.  # noqa: E501
        :rtype: list[BasketItem]
        """
        return self._basket_items

    @basket_items.setter
    def basket_items(self, basket_items):
        """Sets the basket_items of this PrimaryTransaction.

        Required for some payment methods (for example, Klarna)  # noqa: E501

        :param basket_items: The basket_items of this PrimaryTransaction.  # noqa: E501
        :type: list[BasketItem]
        """

        self._basket_items = basket_items

    @property
    def split_shipment(self):
        """Gets the split_shipment of this PrimaryTransaction.  # noqa: E501


        :return: The split_shipment of this PrimaryTransaction.  # noqa: E501
        :rtype: SplitShipment
        """
        return self._split_shipment

    @split_shipment.setter
    def split_shipment(self, split_shipment):
        """Sets the split_shipment of this PrimaryTransaction.


        :param split_shipment: The split_shipment of this PrimaryTransaction.  # noqa: E501
        :type: SplitShipment
        """

        self._split_shipment = split_shipment

    @property
    def additional_details(self):
        """Gets the additional_details of this PrimaryTransaction.  # noqa: E501


        :return: The additional_details of this PrimaryTransaction.  # noqa: E501
        :rtype: PrimaryTransactionAdditionalDetails
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this PrimaryTransaction.


        :param additional_details: The additional_details of this PrimaryTransaction.  # noqa: E501
        :type: PrimaryTransactionAdditionalDetails
        """

        self._additional_details = additional_details

    @property
    def industry_specific_extensions(self):
        """Gets the industry_specific_extensions of this PrimaryTransaction.  # noqa: E501


        :return: The industry_specific_extensions of this PrimaryTransaction.  # noqa: E501
        :rtype: IndustrySpecificExtensions
        """
        return self._industry_specific_extensions

    @industry_specific_extensions.setter
    def industry_specific_extensions(self, industry_specific_extensions):
        """Sets the industry_specific_extensions of this PrimaryTransaction.


        :param industry_specific_extensions: The industry_specific_extensions of this PrimaryTransaction.  # noqa: E501
        :type: IndustrySpecificExtensions
        """

        self._industry_specific_extensions = industry_specific_extensions

    @property
    def stored_credentials(self):
        """Gets the stored_credentials of this PrimaryTransaction.  # noqa: E501


        :return: The stored_credentials of this PrimaryTransaction.  # noqa: E501
        :rtype: StoredCredential
        """
        return self._stored_credentials

    @stored_credentials.setter
    def stored_credentials(self, stored_credentials):
        """Sets the stored_credentials of this PrimaryTransaction.


        :param stored_credentials: The stored_credentials of this PrimaryTransaction.  # noqa: E501
        :type: StoredCredential
        """

        self._stored_credentials = stored_credentials

    @property
    def purchase_card(self):
        """Gets the purchase_card of this PrimaryTransaction.  # noqa: E501


        :return: The purchase_card of this PrimaryTransaction.  # noqa: E501
        :rtype: PurchaseCards
        """
        return self._purchase_card

    @purchase_card.setter
    def purchase_card(self, purchase_card):
        """Sets the purchase_card of this PrimaryTransaction.


        :param purchase_card: The purchase_card of this PrimaryTransaction.  # noqa: E501
        :type: PurchaseCards
        """

        self._purchase_card = purchase_card

    @property
    def payment_facilitator(self):
        """Gets the payment_facilitator of this PrimaryTransaction.  # noqa: E501


        :return: The payment_facilitator of this PrimaryTransaction.  # noqa: E501
        :rtype: PaymentFacilitator
        """
        return self._payment_facilitator

    @payment_facilitator.setter
    def payment_facilitator(self, payment_facilitator):
        """Sets the payment_facilitator of this PrimaryTransaction.


        :param payment_facilitator: The payment_facilitator of this PrimaryTransaction.  # noqa: E501
        :type: PaymentFacilitator
        """

        self._payment_facilitator = payment_facilitator

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this PrimaryTransaction.  # noqa: E501


        :return: The soft_descriptor of this PrimaryTransaction.  # noqa: E501
        :rtype: SoftDescriptor
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this PrimaryTransaction.


        :param soft_descriptor: The soft_descriptor of this PrimaryTransaction.  # noqa: E501
        :type: SoftDescriptor
        """

        self._soft_descriptor = soft_descriptor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimaryTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
