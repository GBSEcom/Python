# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SecondaryTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_origin': 'TransactionOrigin',
        'amount': 'Amount',
        'split_shipment': 'SplitShipment',
        'soft_descriptor': 'SoftDescriptor',
        'additional_details': 'SecondaryTransactionAdditionalDetails'
    }

    attribute_map = {
        'transaction_origin': 'transactionOrigin',
        'amount': 'amount',
        'split_shipment': 'splitShipment',
        'soft_descriptor': 'softDescriptor',
        'additional_details': 'additionalDetails'
    }

    def __init__(self, transaction_origin=None, amount=None, split_shipment=None, soft_descriptor=None, additional_details=None):  # noqa: E501
        """SecondaryTransaction - a model defined in OpenAPI"""  # noqa: E501

        self._transaction_origin = None
        self._amount = None
        self._split_shipment = None
        self._soft_descriptor = None
        self._additional_details = None
        self.discriminator = None

        if transaction_origin is not None:
            self.transaction_origin = transaction_origin
        if amount is not None:
            self.amount = amount
        if split_shipment is not None:
            self.split_shipment = split_shipment
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if additional_details is not None:
            self.additional_details = additional_details

    @property
    def transaction_origin(self):
        """Gets the transaction_origin of this SecondaryTransaction.  # noqa: E501


        :return: The transaction_origin of this SecondaryTransaction.  # noqa: E501
        :rtype: TransactionOrigin
        """
        return self._transaction_origin

    @transaction_origin.setter
    def transaction_origin(self, transaction_origin):
        """Sets the transaction_origin of this SecondaryTransaction.


        :param transaction_origin: The transaction_origin of this SecondaryTransaction.  # noqa: E501
        :type: TransactionOrigin
        """

        self._transaction_origin = transaction_origin

    @property
    def amount(self):
        """Gets the amount of this SecondaryTransaction.  # noqa: E501


        :return: The amount of this SecondaryTransaction.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SecondaryTransaction.


        :param amount: The amount of this SecondaryTransaction.  # noqa: E501
        :type: Amount
        """

        self._amount = amount

    @property
    def split_shipment(self):
        """Gets the split_shipment of this SecondaryTransaction.  # noqa: E501


        :return: The split_shipment of this SecondaryTransaction.  # noqa: E501
        :rtype: SplitShipment
        """
        return self._split_shipment

    @split_shipment.setter
    def split_shipment(self, split_shipment):
        """Sets the split_shipment of this SecondaryTransaction.


        :param split_shipment: The split_shipment of this SecondaryTransaction.  # noqa: E501
        :type: SplitShipment
        """

        self._split_shipment = split_shipment

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this SecondaryTransaction.  # noqa: E501


        :return: The soft_descriptor of this SecondaryTransaction.  # noqa: E501
        :rtype: SoftDescriptor
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this SecondaryTransaction.


        :param soft_descriptor: The soft_descriptor of this SecondaryTransaction.  # noqa: E501
        :type: SoftDescriptor
        """

        self._soft_descriptor = soft_descriptor

    @property
    def additional_details(self):
        """Gets the additional_details of this SecondaryTransaction.  # noqa: E501


        :return: The additional_details of this SecondaryTransaction.  # noqa: E501
        :rtype: SecondaryTransactionAdditionalDetails
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this SecondaryTransaction.


        :param additional_details: The additional_details of this SecondaryTransaction.  # noqa: E501
        :type: SecondaryTransactionAdditionalDetails
        """

        self._additional_details = additional_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecondaryTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
