# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.12.0.20200605.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LodgingExtraCharges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'charge_item': 'str'
    }

    attribute_map = {
        'charge_item': 'chargeItem'
    }

    def __init__(self, charge_item=None, local_vars_configuration=None):  # noqa: E501
        """LodgingExtraCharges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._charge_item = None
        self.discriminator = None

        if charge_item is not None:
            self.charge_item = charge_item

    @property
    def charge_item(self):
        """Gets the charge_item of this LodgingExtraCharges.  # noqa: E501


        :return: The charge_item of this LodgingExtraCharges.  # noqa: E501
        :rtype: str
        """
        return self._charge_item

    @charge_item.setter
    def charge_item(self, charge_item):
        """Sets the charge_item of this LodgingExtraCharges.


        :param charge_item: The charge_item of this LodgingExtraCharges.  # noqa: E501
        :type: str
        """
        allowed_values = ["GIFT_SHOP", "LAUNDRY", "MINI_BAR", "RESTAURANT", "TELEPHONE", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and charge_item not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `charge_item` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_item, allowed_values)
            )

        self._charge_item = charge_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LodgingExtraCharges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LodgingExtraCharges):
            return True

        return self.to_dict() != other.to_dict()
