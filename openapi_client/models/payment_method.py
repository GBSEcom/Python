# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PaymentMethod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'payment_card': 'PaymentCard',
        'payment_token': 'PaymentTokenization',
        'sepa': 'Sepa',
        'pay_pal': 'PayPal',
        'ali_pay': 'AliPay',
        'china_domestic': 'ChinaDomestic'
    }

    attribute_map = {
        'type': 'type',
        'payment_card': 'paymentCard',
        'payment_token': 'paymentToken',
        'sepa': 'sepa',
        'pay_pal': 'payPal',
        'ali_pay': 'aliPay',
        'china_domestic': 'chinaDomestic'
    }

    def __init__(self, type=None, payment_card=None, payment_token=None, sepa=None, pay_pal=None, ali_pay=None, china_domestic=None):  # noqa: E501
        """PaymentMethod - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._payment_card = None
        self._payment_token = None
        self._sepa = None
        self._pay_pal = None
        self._ali_pay = None
        self._china_domestic = None
        self.discriminator = None

        self.type = type
        if payment_card is not None:
            self.payment_card = payment_card
        if payment_token is not None:
            self.payment_token = payment_token
        if sepa is not None:
            self.sepa = sepa
        if pay_pal is not None:
            self.pay_pal = pay_pal
        if ali_pay is not None:
            self.ali_pay = ali_pay
        if china_domestic is not None:
            self.china_domestic = china_domestic

    @property
    def type(self):
        """Gets the type of this PaymentMethod.  # noqa: E501

        The type of payment method. Note that PayPal can only process a 'CREDIT' transaction. Note that for requests we are now supporting only PAYMENT_CARD, SEPA, PAYPAL, ALIPAY. All this types are supported for response.  # noqa: E501

        :return: The type of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethod.

        The type of payment method. Note that PayPal can only process a 'CREDIT' transaction. Note that for requests we are now supporting only PAYMENT_CARD, SEPA, PAYPAL, ALIPAY. All this types are supported for response.  # noqa: E501

        :param type: The type of this PaymentMethod.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ALIPAY", "ALIPAY_PAYSECURE_US", "ALIPAY_DOMESTIC", "APM", "CUP_DOMESTIC", "DEBITDE", "EMI", "GIROPAY", "IDEAL", "INDIAWALLET", "KLARNA", "NETBANKING", "PAYMENT_CARD", "PAYMENT_TOKEN", "PAYPAL", "SEPA", "SOFORT", "WALLET", "WECHAT_DOMESTIC"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def payment_card(self):
        """Gets the payment_card of this PaymentMethod.  # noqa: E501


        :return: The payment_card of this PaymentMethod.  # noqa: E501
        :rtype: PaymentCard
        """
        return self._payment_card

    @payment_card.setter
    def payment_card(self, payment_card):
        """Sets the payment_card of this PaymentMethod.


        :param payment_card: The payment_card of this PaymentMethod.  # noqa: E501
        :type: PaymentCard
        """

        self._payment_card = payment_card

    @property
    def payment_token(self):
        """Gets the payment_token of this PaymentMethod.  # noqa: E501


        :return: The payment_token of this PaymentMethod.  # noqa: E501
        :rtype: PaymentTokenization
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """Sets the payment_token of this PaymentMethod.


        :param payment_token: The payment_token of this PaymentMethod.  # noqa: E501
        :type: PaymentTokenization
        """

        self._payment_token = payment_token

    @property
    def sepa(self):
        """Gets the sepa of this PaymentMethod.  # noqa: E501


        :return: The sepa of this PaymentMethod.  # noqa: E501
        :rtype: Sepa
        """
        return self._sepa

    @sepa.setter
    def sepa(self, sepa):
        """Sets the sepa of this PaymentMethod.


        :param sepa: The sepa of this PaymentMethod.  # noqa: E501
        :type: Sepa
        """

        self._sepa = sepa

    @property
    def pay_pal(self):
        """Gets the pay_pal of this PaymentMethod.  # noqa: E501


        :return: The pay_pal of this PaymentMethod.  # noqa: E501
        :rtype: PayPal
        """
        return self._pay_pal

    @pay_pal.setter
    def pay_pal(self, pay_pal):
        """Sets the pay_pal of this PaymentMethod.


        :param pay_pal: The pay_pal of this PaymentMethod.  # noqa: E501
        :type: PayPal
        """

        self._pay_pal = pay_pal

    @property
    def ali_pay(self):
        """Gets the ali_pay of this PaymentMethod.  # noqa: E501


        :return: The ali_pay of this PaymentMethod.  # noqa: E501
        :rtype: AliPay
        """
        return self._ali_pay

    @ali_pay.setter
    def ali_pay(self, ali_pay):
        """Sets the ali_pay of this PaymentMethod.


        :param ali_pay: The ali_pay of this PaymentMethod.  # noqa: E501
        :type: AliPay
        """

        self._ali_pay = ali_pay

    @property
    def china_domestic(self):
        """Gets the china_domestic of this PaymentMethod.  # noqa: E501


        :return: The china_domestic of this PaymentMethod.  # noqa: E501
        :rtype: ChinaDomestic
        """
        return self._china_domestic

    @china_domestic.setter
    def china_domestic(self, china_domestic):
        """Sets the china_domestic of this PaymentMethod.


        :param china_domestic: The china_domestic of this PaymentMethod.  # noqa: E501
        :type: ChinaDomestic
        """

        self._china_domestic = china_domestic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
