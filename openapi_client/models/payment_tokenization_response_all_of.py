# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.12.0.20200605.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PaymentTokenizationResponseAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'request_status': 'str',
        'request_time': 'int',
        'brand': 'str',
        'country': 'str',
        'payment_token': 'PaymentTokenDetails',
        'payment_card': 'PaymentCard',
        'processor': 'ProcessorData',
        'order_id': 'str'
    }

    attribute_map = {
        'request_status': 'requestStatus',
        'request_time': 'requestTime',
        'brand': 'brand',
        'country': 'country',
        'payment_token': 'paymentToken',
        'payment_card': 'paymentCard',
        'processor': 'processor',
        'order_id': 'orderId'
    }

    def __init__(self, request_status=None, request_time=None, brand=None, country=None, payment_token=None, payment_card=None, processor=None, order_id=None, local_vars_configuration=None):  # noqa: E501
        """PaymentTokenizationResponseAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._request_status = None
        self._request_time = None
        self._brand = None
        self._country = None
        self._payment_token = None
        self._payment_card = None
        self._processor = None
        self._order_id = None
        self.discriminator = None

        if request_status is not None:
            self.request_status = request_status
        if request_time is not None:
            self.request_time = request_time
        if brand is not None:
            self.brand = brand
        if country is not None:
            self.country = country
        if payment_token is not None:
            self.payment_token = payment_token
        if payment_card is not None:
            self.payment_card = payment_card
        if processor is not None:
            self.processor = processor
        if order_id is not None:
            self.order_id = order_id

    @property
    def request_status(self):
        """Gets the request_status of this PaymentTokenizationResponseAllOf.  # noqa: E501

        The status of the request.  # noqa: E501

        :return: The request_status of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: str
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this PaymentTokenizationResponseAllOf.

        The status of the request.  # noqa: E501

        :param request_status: The request_status of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["DELETED", "FAILED", "SUCCESS", "APPROVED", "WAITING", "VALIDATION_FAILED", "DECLINED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and request_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `request_status` ({0}), must be one of {1}"  # noqa: E501
                .format(request_status, allowed_values)
            )

        self._request_status = request_status

    @property
    def request_time(self):
        """Gets the request_time of this PaymentTokenizationResponseAllOf.  # noqa: E501

        Time of the request.  # noqa: E501

        :return: The request_time of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: int
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this PaymentTokenizationResponseAllOf.

        Time of the request.  # noqa: E501

        :param request_time: The request_time of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: int
        """

        self._request_time = request_time

    @property
    def brand(self):
        """Gets the brand of this PaymentTokenizationResponseAllOf.  # noqa: E501

        Card brand.  # noqa: E501

        :return: The brand of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PaymentTokenizationResponseAllOf.

        Card brand.  # noqa: E501

        :param brand: The brand of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def country(self):
        """Gets the country of this PaymentTokenizationResponseAllOf.  # noqa: E501

        Country of the card issued.  # noqa: E501

        :return: The country of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PaymentTokenizationResponseAllOf.

        Country of the card issued.  # noqa: E501

        :param country: The country of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def payment_token(self):
        """Gets the payment_token of this PaymentTokenizationResponseAllOf.  # noqa: E501


        :return: The payment_token of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: PaymentTokenDetails
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """Sets the payment_token of this PaymentTokenizationResponseAllOf.


        :param payment_token: The payment_token of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: PaymentTokenDetails
        """

        self._payment_token = payment_token

    @property
    def payment_card(self):
        """Gets the payment_card of this PaymentTokenizationResponseAllOf.  # noqa: E501


        :return: The payment_card of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: PaymentCard
        """
        return self._payment_card

    @payment_card.setter
    def payment_card(self, payment_card):
        """Sets the payment_card of this PaymentTokenizationResponseAllOf.


        :param payment_card: The payment_card of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: PaymentCard
        """

        self._payment_card = payment_card

    @property
    def processor(self):
        """Gets the processor of this PaymentTokenizationResponseAllOf.  # noqa: E501


        :return: The processor of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: ProcessorData
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this PaymentTokenizationResponseAllOf.


        :param processor: The processor of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: ProcessorData
        """

        self._processor = processor

    @property
    def order_id(self):
        """Gets the order_id of this PaymentTokenizationResponseAllOf.  # noqa: E501

        Client order ID if supplied by client, otherwise the order ID.  # noqa: E501

        :return: The order_id of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentTokenizationResponseAllOf.

        Client order ID if supplied by client, otherwise the order ID.  # noqa: E501

        :param order_id: The order_id of this PaymentTokenizationResponseAllOf.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentTokenizationResponseAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentTokenizationResponseAllOf):
            return True

        return self.to_dict() != other.to_dict()
