# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.8.0.20190731.002
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AuthenticationRedirect(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'target_url': 'str',
        'params': 'AuthenticationRedirectParams'
    }

    attribute_map = {
        'type': 'type',
        'target_url': 'targetUrl',
        'params': 'params'
    }

    def __init__(self, type=None, target_url=None, params=None):  # noqa: E501
        """AuthenticationRedirect - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._target_url = None
        self._params = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if target_url is not None:
            self.target_url = target_url
        if params is not None:
            self.params = params

    @property
    def type(self):
        """Gets the type of this AuthenticationRedirect.  # noqa: E501

        The type of authentication.  # noqa: E501

        :return: The type of this AuthenticationRedirect.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthenticationRedirect.

        The type of authentication.  # noqa: E501

        :param type: The type of this AuthenticationRedirect.  # noqa: E501
        :type: str
        """
        allowed_values = ["SECURE_3D"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def target_url(self):
        """Gets the target_url of this AuthenticationRedirect.  # noqa: E501

        The URL for the authentication redirect for the merchant.  # noqa: E501

        :return: The target_url of this AuthenticationRedirect.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this AuthenticationRedirect.

        The URL for the authentication redirect for the merchant.  # noqa: E501

        :param target_url: The target_url of this AuthenticationRedirect.  # noqa: E501
        :type: str
        """

        self._target_url = target_url

    @property
    def params(self):
        """Gets the params of this AuthenticationRedirect.  # noqa: E501


        :return: The params of this AuthenticationRedirect.  # noqa: E501
        :rtype: AuthenticationRedirectParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this AuthenticationRedirect.


        :param params: The params of this AuthenticationRedirect.  # noqa: E501
        :type: AuthenticationRedirectParams
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationRedirect):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
