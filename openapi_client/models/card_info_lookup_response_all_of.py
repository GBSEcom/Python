# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.12.0.20200605.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CardInfoLookupResponseAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card_details': 'list[CardInfo]',
        'request_status': 'str'
    }

    attribute_map = {
        'card_details': 'cardDetails',
        'request_status': 'requestStatus'
    }

    def __init__(self, card_details=None, request_status=None, local_vars_configuration=None):  # noqa: E501
        """CardInfoLookupResponseAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._card_details = None
        self._request_status = None
        self.discriminator = None

        if card_details is not None:
            self.card_details = card_details
        if request_status is not None:
            self.request_status = request_status

    @property
    def card_details(self):
        """Gets the card_details of this CardInfoLookupResponseAllOf.  # noqa: E501

        One or more card information retrieved based on BIN.  # noqa: E501

        :return: The card_details of this CardInfoLookupResponseAllOf.  # noqa: E501
        :rtype: list[CardInfo]
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details):
        """Sets the card_details of this CardInfoLookupResponseAllOf.

        One or more card information retrieved based on BIN.  # noqa: E501

        :param card_details: The card_details of this CardInfoLookupResponseAllOf.  # noqa: E501
        :type: list[CardInfo]
        """

        self._card_details = card_details

    @property
    def request_status(self):
        """Gets the request_status of this CardInfoLookupResponseAllOf.  # noqa: E501

        Request status.  # noqa: E501

        :return: The request_status of this CardInfoLookupResponseAllOf.  # noqa: E501
        :rtype: str
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this CardInfoLookupResponseAllOf.

        Request status.  # noqa: E501

        :param request_status: The request_status of this CardInfoLookupResponseAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "LIST_EMPTY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and request_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `request_status` ({0}), must be one of {1}"  # noqa: E501
                .format(request_status, allowed_values)
            )

        self._request_status = request_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardInfoLookupResponseAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CardInfoLookupResponseAllOf):
            return True

        return self.to_dict() != other.to_dict()
