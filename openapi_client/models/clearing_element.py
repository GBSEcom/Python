# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.13.0.20200810.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClearingElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'brand': 'str',
        'value': 'int',
        'count': 'int'
    }

    attribute_map = {
        'brand': 'brand',
        'value': 'value',
        'count': 'count'
    }

    def __init__(self, brand=None, value=None, count=None):  # noqa: E501
        """ClearingElement - a model defined in OpenAPI"""  # noqa: E501

        self._brand = None
        self._value = None
        self._count = None
        self.discriminator = None

        if brand is not None:
            self.brand = brand
        if value is not None:
            self.value = value
        if count is not None:
            self.count = count

    @property
    def brand(self):
        """Gets the brand of this ClearingElement.  # noqa: E501

        Contains the brand of the card.  # noqa: E501

        :return: The brand of this ClearingElement.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ClearingElement.

        Contains the brand of the card.  # noqa: E501

        :param brand: The brand of this ClearingElement.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def value(self):
        """Gets the value of this ClearingElement.  # noqa: E501

        Holds the total clearing value computed for a specific brand.  # noqa: E501

        :return: The value of this ClearingElement.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ClearingElement.

        Holds the total clearing value computed for a specific brand.  # noqa: E501

        :param value: The value of this ClearingElement.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def count(self):
        """Gets the count of this ClearingElement.  # noqa: E501

        Specifies the amount of clearing elements for a given brand.  # noqa: E501

        :return: The count of this ClearingElement.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ClearingElement.

        Specifies the amount of clearing elements for a given brand.  # noqa: E501

        :param count: The count of this ClearingElement.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClearingElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
