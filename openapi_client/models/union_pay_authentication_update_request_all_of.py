# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.4.0.20210824.002
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UnionPayAuthenticationUpdateRequestAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sms_verification_code': 'str',
        'security_code': 'str'
    }

    attribute_map = {
        'sms_verification_code': 'smsVerificationCode',
        'security_code': 'securityCode'
    }

    def __init__(self, sms_verification_code=None, security_code=None):  # noqa: E501
        """UnionPayAuthenticationUpdateRequestAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._sms_verification_code = None
        self._security_code = None
        self.discriminator = None

        self.sms_verification_code = sms_verification_code
        if security_code is not None:
            self.security_code = security_code

    @property
    def sms_verification_code(self):
        """Gets the sms_verification_code of this UnionPayAuthenticationUpdateRequestAllOf.  # noqa: E501

        Customer mobile number for SMS verification.  # noqa: E501

        :return: The sms_verification_code of this UnionPayAuthenticationUpdateRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._sms_verification_code

    @sms_verification_code.setter
    def sms_verification_code(self, sms_verification_code):
        """Sets the sms_verification_code of this UnionPayAuthenticationUpdateRequestAllOf.

        Customer mobile number for SMS verification.  # noqa: E501

        :param sms_verification_code: The sms_verification_code of this UnionPayAuthenticationUpdateRequestAllOf.  # noqa: E501
        :type: str
        """
        if sms_verification_code is None:
            raise ValueError("Invalid value for `sms_verification_code`, must not be `None`")  # noqa: E501
        if sms_verification_code is not None and not re.search(r'^(?!\s*$).+', sms_verification_code):  # noqa: E501
            raise ValueError(r"Invalid value for `sms_verification_code`, must be a follow pattern or equal to `/^(?!\s*$).+/`")  # noqa: E501

        self._sms_verification_code = sms_verification_code

    @property
    def security_code(self):
        """Gets the security_code of this UnionPayAuthenticationUpdateRequestAllOf.  # noqa: E501

        Card security code if required by merchant.  # noqa: E501

        :return: The security_code of this UnionPayAuthenticationUpdateRequestAllOf.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this UnionPayAuthenticationUpdateRequestAllOf.

        Card security code if required by merchant.  # noqa: E501

        :param security_code: The security_code of this UnionPayAuthenticationUpdateRequestAllOf.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnionPayAuthenticationUpdateRequestAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
