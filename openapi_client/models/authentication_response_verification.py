# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AuthenticationResponseVerification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'sms_verification_code': 'str',
        'merchant_data': 'str',
        'pa_res': 'str'
    }

    attribute_map = {
        'type': 'type',
        'sms_verification_code': 'smsVerificationCode',
        'merchant_data': 'merchantData',
        'pa_res': 'paRes'
    }

    def __init__(self, type=None, sms_verification_code=None, merchant_data=None, pa_res=None):  # noqa: E501
        """AuthenticationResponseVerification - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._sms_verification_code = None
        self._merchant_data = None
        self._pa_res = None
        self.discriminator = None

        self.type = type
        if sms_verification_code is not None:
            self.sms_verification_code = sms_verification_code
        if merchant_data is not None:
            self.merchant_data = merchant_data
        if pa_res is not None:
            self.pa_res = pa_res

    @property
    def type(self):
        """Gets the type of this AuthenticationResponseVerification.  # noqa: E501


        :return: The type of this AuthenticationResponseVerification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuthenticationResponseVerification.


        :param type: The type of this AuthenticationResponseVerification.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["SECURE_3D", "UNIONPAY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sms_verification_code(self):
        """Gets the sms_verification_code of this AuthenticationResponseVerification.  # noqa: E501

        Use this to enter the customer mobile number for SMS verification.  # noqa: E501

        :return: The sms_verification_code of this AuthenticationResponseVerification.  # noqa: E501
        :rtype: str
        """
        return self._sms_verification_code

    @sms_verification_code.setter
    def sms_verification_code(self, sms_verification_code):
        """Sets the sms_verification_code of this AuthenticationResponseVerification.

        Use this to enter the customer mobile number for SMS verification.  # noqa: E501

        :param sms_verification_code: The sms_verification_code of this AuthenticationResponseVerification.  # noqa: E501
        :type: str
        """

        self._sms_verification_code = sms_verification_code

    @property
    def merchant_data(self):
        """Gets the merchant_data of this AuthenticationResponseVerification.  # noqa: E501


        :return: The merchant_data of this AuthenticationResponseVerification.  # noqa: E501
        :rtype: str
        """
        return self._merchant_data

    @merchant_data.setter
    def merchant_data(self, merchant_data):
        """Sets the merchant_data of this AuthenticationResponseVerification.


        :param merchant_data: The merchant_data of this AuthenticationResponseVerification.  # noqa: E501
        :type: str
        """

        self._merchant_data = merchant_data

    @property
    def pa_res(self):
        """Gets the pa_res of this AuthenticationResponseVerification.  # noqa: E501

        Payer authentication result from Payment Authentication Response (PaRes)  # noqa: E501

        :return: The pa_res of this AuthenticationResponseVerification.  # noqa: E501
        :rtype: str
        """
        return self._pa_res

    @pa_res.setter
    def pa_res(self, pa_res):
        """Sets the pa_res of this AuthenticationResponseVerification.

        Payer authentication result from Payment Authentication Response (PaRes)  # noqa: E501

        :param pa_res: The pa_res of this AuthenticationResponseVerification.  # noqa: E501
        :type: str
        """

        self._pa_res = pa_res

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationResponseVerification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
