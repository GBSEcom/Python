# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SoftDescriptor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dba': 'str',
        'mcc': 'str'
    }

    attribute_map = {
        'dba': 'dba',
        'mcc': 'mcc'
    }

    def __init__(self, dba=None, mcc=None):  # noqa: E501
        """SoftDescriptor - a model defined in OpenAPI"""  # noqa: E501

        self._dba = None
        self._mcc = None
        self.discriminator = None

        self.dba = dba
        if mcc is not None:
            self.mcc = mcc

    @property
    def dba(self):
        """Gets the dba of this SoftDescriptor.  # noqa: E501

        Store \"doing-business-as\" name  # noqa: E501

        :return: The dba of this SoftDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._dba

    @dba.setter
    def dba(self, dba):
        """Sets the dba of this SoftDescriptor.

        Store \"doing-business-as\" name  # noqa: E501

        :param dba: The dba of this SoftDescriptor.  # noqa: E501
        :type: str
        """
        if dba is None:
            raise ValueError("Invalid value for `dba`, must not be `None`")  # noqa: E501

        self._dba = dba

    @property
    def mcc(self):
        """Gets the mcc of this SoftDescriptor.  # noqa: E501

        The 4-digit Merchant Category Code. The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.  # noqa: E501

        :return: The mcc of this SoftDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this SoftDescriptor.

        The 4-digit Merchant Category Code. The merchant might be associated with multiple MCCs. In that case the MCC provided here will be the one that better describes the current transaction.  # noqa: E501

        :param mcc: The mcc of this SoftDescriptor.  # noqa: E501
        :type: str
        """
        if mcc is not None and len(mcc) > 4:
            raise ValueError("Invalid value for `mcc`, length must be less than or equal to `4`")  # noqa: E501

        self._mcc = mcc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
