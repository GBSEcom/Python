# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.4.0.20210824.002
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IdInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id_type': 'str',
        'id_data': 'str'
    }

    attribute_map = {
        'id_type': 'idType',
        'id_data': 'idData'
    }

    def __init__(self, id_type=None, id_data=None):  # noqa: E501
        """IdInfo - a model defined in OpenAPI"""  # noqa: E501

        self._id_type = None
        self._id_data = None
        self.discriminator = None

        if id_type is not None:
            self.id_type = id_type
        if id_data is not None:
            self.id_data = id_data

    @property
    def id_type(self):
        """Gets the id_type of this IdInfo.  # noqa: E501

        Identification type.  # noqa: E501

        :return: The id_type of this IdInfo.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this IdInfo.

        Identification type.  # noqa: E501

        :param id_type: The id_type of this IdInfo.  # noqa: E501
        :type: str
        """
        if id_type is not None and len(id_type) > 2:
            raise ValueError("Invalid value for `id_type`, length must be less than or equal to `2`")  # noqa: E501

        self._id_type = id_type

    @property
    def id_data(self):
        """Gets the id_data of this IdInfo.  # noqa: E501

        Identification data.  # noqa: E501

        :return: The id_data of this IdInfo.  # noqa: E501
        :rtype: str
        """
        return self._id_data

    @id_data.setter
    def id_data(self, id_data):
        """Sets the id_data of this IdInfo.

        Identification data.  # noqa: E501

        :param id_data: The id_data of this IdInfo.  # noqa: E501
        :type: str
        """
        if id_data is not None and len(id_data) > 35:
            raise ValueError("Invalid value for `id_data`, length must be less than or equal to `35`")  # noqa: E501
        if id_data is not None and len(id_data) < 1:
            raise ValueError("Invalid value for `id_data`, length must be greater than or equal to `1`")  # noqa: E501

        self._id_data = id_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
