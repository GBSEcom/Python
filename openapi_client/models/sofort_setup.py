# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.1.0.20210122.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SofortSetup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'str',
        'project_id': 'str',
        'api_key': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'project_id': 'projectId',
        'api_key': 'apiKey'
    }

    def __init__(self, customer_id=None, project_id=None, api_key=None):  # noqa: E501
        """SofortSetup - a model defined in OpenAPI"""  # noqa: E501

        self._customer_id = None
        self._project_id = None
        self._api_key = None
        self.discriminator = None

        self.customer_id = customer_id
        self.project_id = project_id
        self.api_key = api_key

    @property
    def customer_id(self):
        """Gets the customer_id of this SofortSetup.  # noqa: E501

        Sofort customer identifier.  # noqa: E501

        :return: The customer_id of this SofortSetup.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SofortSetup.

        Sofort customer identifier.  # noqa: E501

        :param customer_id: The customer_id of this SofortSetup.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501
        if customer_id is not None and len(customer_id) > 10:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `10`")  # noqa: E501
        if customer_id is not None and not re.search(r'^[0-9]+$', customer_id):  # noqa: E501
            raise ValueError(r"Invalid value for `customer_id`, must be a follow pattern or equal to `/^[0-9]+$/`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def project_id(self):
        """Gets the project_id of this SofortSetup.  # noqa: E501

        Sofort project identifier.  # noqa: E501

        :return: The project_id of this SofortSetup.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SofortSetup.

        Sofort project identifier.  # noqa: E501

        :param project_id: The project_id of this SofortSetup.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501
        if project_id is not None and len(project_id) > 10:
            raise ValueError("Invalid value for `project_id`, length must be less than or equal to `10`")  # noqa: E501
        if project_id is not None and not re.search(r'^[0-9]+$', project_id):  # noqa: E501
            raise ValueError(r"Invalid value for `project_id`, must be a follow pattern or equal to `/^[0-9]+$/`")  # noqa: E501

        self._project_id = project_id

    @property
    def api_key(self):
        """Gets the api_key of this SofortSetup.  # noqa: E501

        API key provided by Sofort.  # noqa: E501

        :return: The api_key of this SofortSetup.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this SofortSetup.

        API key provided by Sofort.  # noqa: E501

        :param api_key: The api_key of this SofortSetup.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501
        if api_key is not None and len(api_key) > 40:
            raise ValueError("Invalid value for `api_key`, length must be less than or equal to `40`")  # noqa: E501
        if api_key is not None and not re.search(r'^[a-z0-9]+$', api_key):  # noqa: E501
            raise ValueError(r"Invalid value for `api_key`, must be a follow pattern or equal to `/^[a-z0-9]+$/`")  # noqa: E501

        self._api_key = api_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SofortSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
