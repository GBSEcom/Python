# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.13.0.20200810.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BlockName(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'order_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'order_id': 'orderId'
    }

    def __init__(self, name=None, order_id=None):  # noqa: E501
        """BlockName - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._order_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if order_id is not None:
            self.order_id = order_id

    @property
    def name(self):
        """Gets the name of this BlockName.  # noqa: E501

        Use this field to send name to be blocked.  # noqa: E501

        :return: The name of this BlockName.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BlockName.

        Use this field to send name to be blocked.  # noqa: E501

        :param name: The name of this BlockName.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order_id(self):
        """Gets the order_id of this BlockName.  # noqa: E501

        Client order ID.  # noqa: E501

        :return: The order_id of this BlockName.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this BlockName.

        Client order ID.  # noqa: E501

        :param order_id: The order_id of this BlockName.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
