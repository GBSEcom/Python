# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.4.0.20210824.002
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReturnTransactionAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_amount': 'Amount',
        'soft_descriptor': 'SoftDescriptor',
        'stored_credentials': 'StoredCredential',
        'currency_conversion': 'CurrencyConversion'
    }

    attribute_map = {
        'transaction_amount': 'transactionAmount',
        'soft_descriptor': 'softDescriptor',
        'stored_credentials': 'storedCredentials',
        'currency_conversion': 'currencyConversion'
    }

    def __init__(self, transaction_amount=None, soft_descriptor=None, stored_credentials=None, currency_conversion=None):  # noqa: E501
        """ReturnTransactionAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._transaction_amount = None
        self._soft_descriptor = None
        self._stored_credentials = None
        self._currency_conversion = None
        self.discriminator = None

        self.transaction_amount = transaction_amount
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if stored_credentials is not None:
            self.stored_credentials = stored_credentials
        if currency_conversion is not None:
            self.currency_conversion = currency_conversion

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this ReturnTransactionAllOf.  # noqa: E501


        :return: The transaction_amount of this ReturnTransactionAllOf.  # noqa: E501
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this ReturnTransactionAllOf.


        :param transaction_amount: The transaction_amount of this ReturnTransactionAllOf.  # noqa: E501
        :type: Amount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")  # noqa: E501

        self._transaction_amount = transaction_amount

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this ReturnTransactionAllOf.  # noqa: E501


        :return: The soft_descriptor of this ReturnTransactionAllOf.  # noqa: E501
        :rtype: SoftDescriptor
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this ReturnTransactionAllOf.


        :param soft_descriptor: The soft_descriptor of this ReturnTransactionAllOf.  # noqa: E501
        :type: SoftDescriptor
        """

        self._soft_descriptor = soft_descriptor

    @property
    def stored_credentials(self):
        """Gets the stored_credentials of this ReturnTransactionAllOf.  # noqa: E501


        :return: The stored_credentials of this ReturnTransactionAllOf.  # noqa: E501
        :rtype: StoredCredential
        """
        return self._stored_credentials

    @stored_credentials.setter
    def stored_credentials(self, stored_credentials):
        """Sets the stored_credentials of this ReturnTransactionAllOf.


        :param stored_credentials: The stored_credentials of this ReturnTransactionAllOf.  # noqa: E501
        :type: StoredCredential
        """

        self._stored_credentials = stored_credentials

    @property
    def currency_conversion(self):
        """Gets the currency_conversion of this ReturnTransactionAllOf.  # noqa: E501


        :return: The currency_conversion of this ReturnTransactionAllOf.  # noqa: E501
        :rtype: CurrencyConversion
        """
        return self._currency_conversion

    @currency_conversion.setter
    def currency_conversion(self, currency_conversion):
        """Sets the currency_conversion of this ReturnTransactionAllOf.


        :param currency_conversion: The currency_conversion of this ReturnTransactionAllOf.  # noqa: E501
        :type: CurrencyConversion
        """

        self._currency_conversion = currency_conversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReturnTransactionAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
