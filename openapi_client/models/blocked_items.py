# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.13.0.20200810.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BlockedItems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_card': 'BlockCard',
        'block_domain': 'BlockDomain',
        'block_name': 'BlockName',
        'block_ip_address': 'BlockIPAddress'
    }

    attribute_map = {
        'block_card': 'blockCard',
        'block_domain': 'blockDomain',
        'block_name': 'blockName',
        'block_ip_address': 'blockIPAddress'
    }

    def __init__(self, block_card=None, block_domain=None, block_name=None, block_ip_address=None):  # noqa: E501
        """BlockedItems - a model defined in OpenAPI"""  # noqa: E501

        self._block_card = None
        self._block_domain = None
        self._block_name = None
        self._block_ip_address = None
        self.discriminator = None

        if block_card is not None:
            self.block_card = block_card
        if block_domain is not None:
            self.block_domain = block_domain
        if block_name is not None:
            self.block_name = block_name
        if block_ip_address is not None:
            self.block_ip_address = block_ip_address

    @property
    def block_card(self):
        """Gets the block_card of this BlockedItems.  # noqa: E501


        :return: The block_card of this BlockedItems.  # noqa: E501
        :rtype: BlockCard
        """
        return self._block_card

    @block_card.setter
    def block_card(self, block_card):
        """Sets the block_card of this BlockedItems.


        :param block_card: The block_card of this BlockedItems.  # noqa: E501
        :type: BlockCard
        """

        self._block_card = block_card

    @property
    def block_domain(self):
        """Gets the block_domain of this BlockedItems.  # noqa: E501


        :return: The block_domain of this BlockedItems.  # noqa: E501
        :rtype: BlockDomain
        """
        return self._block_domain

    @block_domain.setter
    def block_domain(self, block_domain):
        """Sets the block_domain of this BlockedItems.


        :param block_domain: The block_domain of this BlockedItems.  # noqa: E501
        :type: BlockDomain
        """

        self._block_domain = block_domain

    @property
    def block_name(self):
        """Gets the block_name of this BlockedItems.  # noqa: E501


        :return: The block_name of this BlockedItems.  # noqa: E501
        :rtype: BlockName
        """
        return self._block_name

    @block_name.setter
    def block_name(self, block_name):
        """Sets the block_name of this BlockedItems.


        :param block_name: The block_name of this BlockedItems.  # noqa: E501
        :type: BlockName
        """

        self._block_name = block_name

    @property
    def block_ip_address(self):
        """Gets the block_ip_address of this BlockedItems.  # noqa: E501


        :return: The block_ip_address of this BlockedItems.  # noqa: E501
        :rtype: BlockIPAddress
        """
        return self._block_ip_address

    @block_ip_address.setter
    def block_ip_address(self, block_ip_address):
        """Sets the block_ip_address of this BlockedItems.


        :param block_ip_address: The block_ip_address of this BlockedItems.  # noqa: E501
        :type: BlockIPAddress
        """

        self._block_ip_address = block_ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockedItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
