# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.4.0.20210824.002
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StandinResponseDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'secure3_d_enrolment_status': 'str',
        'secure3_deci': 'str',
        'secure3_d_authentication_response': 'str',
        'authentication_value': 'str',
        'xid': 'str',
        'authentication_algorithm': 'str'
    }

    attribute_map = {
        'secure3_d_enrolment_status': 'secure3DEnrolmentStatus',
        'secure3_deci': 'secure3DECI',
        'secure3_d_authentication_response': 'secure3DAuthenticationResponse',
        'authentication_value': 'authenticationValue',
        'xid': 'xid',
        'authentication_algorithm': 'authenticationAlgorithm'
    }

    def __init__(self, secure3_d_enrolment_status=None, secure3_deci=None, secure3_d_authentication_response=None, authentication_value=None, xid=None, authentication_algorithm=None):  # noqa: E501
        """StandinResponseDetails - a model defined in OpenAPI"""  # noqa: E501

        self._secure3_d_enrolment_status = None
        self._secure3_deci = None
        self._secure3_d_authentication_response = None
        self._authentication_value = None
        self._xid = None
        self._authentication_algorithm = None
        self.discriminator = None

        if secure3_d_enrolment_status is not None:
            self.secure3_d_enrolment_status = secure3_d_enrolment_status
        if secure3_deci is not None:
            self.secure3_deci = secure3_deci
        if secure3_d_authentication_response is not None:
            self.secure3_d_authentication_response = secure3_d_authentication_response
        if authentication_value is not None:
            self.authentication_value = authentication_value
        if xid is not None:
            self.xid = xid
        if authentication_algorithm is not None:
            self.authentication_algorithm = authentication_algorithm

    @property
    def secure3_d_enrolment_status(self):
        """Gets the secure3_d_enrolment_status of this StandinResponseDetails.  # noqa: E501

        Secure 3D Enrolment Status.  # noqa: E501

        :return: The secure3_d_enrolment_status of this StandinResponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._secure3_d_enrolment_status

    @secure3_d_enrolment_status.setter
    def secure3_d_enrolment_status(self, secure3_d_enrolment_status):
        """Sets the secure3_d_enrolment_status of this StandinResponseDetails.

        Secure 3D Enrolment Status.  # noqa: E501

        :param secure3_d_enrolment_status: The secure3_d_enrolment_status of this StandinResponseDetails.  # noqa: E501
        :type: str
        """

        self._secure3_d_enrolment_status = secure3_d_enrolment_status

    @property
    def secure3_deci(self):
        """Gets the secure3_deci of this StandinResponseDetails.  # noqa: E501

        Secure 3D ECI.  # noqa: E501

        :return: The secure3_deci of this StandinResponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._secure3_deci

    @secure3_deci.setter
    def secure3_deci(self, secure3_deci):
        """Sets the secure3_deci of this StandinResponseDetails.

        Secure 3D ECI.  # noqa: E501

        :param secure3_deci: The secure3_deci of this StandinResponseDetails.  # noqa: E501
        :type: str
        """

        self._secure3_deci = secure3_deci

    @property
    def secure3_d_authentication_response(self):
        """Gets the secure3_d_authentication_response of this StandinResponseDetails.  # noqa: E501

        Secure 3D Authentication Response.  # noqa: E501

        :return: The secure3_d_authentication_response of this StandinResponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._secure3_d_authentication_response

    @secure3_d_authentication_response.setter
    def secure3_d_authentication_response(self, secure3_d_authentication_response):
        """Sets the secure3_d_authentication_response of this StandinResponseDetails.

        Secure 3D Authentication Response.  # noqa: E501

        :param secure3_d_authentication_response: The secure3_d_authentication_response of this StandinResponseDetails.  # noqa: E501
        :type: str
        """

        self._secure3_d_authentication_response = secure3_d_authentication_response

    @property
    def authentication_value(self):
        """Gets the authentication_value of this StandinResponseDetails.  # noqa: E501

        Secure 3D Authentication Value.  # noqa: E501

        :return: The authentication_value of this StandinResponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._authentication_value

    @authentication_value.setter
    def authentication_value(self, authentication_value):
        """Sets the authentication_value of this StandinResponseDetails.

        Secure 3D Authentication Value.  # noqa: E501

        :param authentication_value: The authentication_value of this StandinResponseDetails.  # noqa: E501
        :type: str
        """

        self._authentication_value = authentication_value

    @property
    def xid(self):
        """Gets the xid of this StandinResponseDetails.  # noqa: E501

        Secure 3D XID.  # noqa: E501

        :return: The xid of this StandinResponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this StandinResponseDetails.

        Secure 3D XID.  # noqa: E501

        :param xid: The xid of this StandinResponseDetails.  # noqa: E501
        :type: str
        """

        self._xid = xid

    @property
    def authentication_algorithm(self):
        """Gets the authentication_algorithm of this StandinResponseDetails.  # noqa: E501

        Secure 3D Authentication Algorithm.  # noqa: E501

        :return: The authentication_algorithm of this StandinResponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._authentication_algorithm

    @authentication_algorithm.setter
    def authentication_algorithm(self, authentication_algorithm):
        """Sets the authentication_algorithm of this StandinResponseDetails.

        Secure 3D Authentication Algorithm.  # noqa: E501

        :param authentication_algorithm: The authentication_algorithm of this StandinResponseDetails.  # noqa: E501
        :type: str
        """

        self._authentication_algorithm = authentication_algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandinResponseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
