# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 21.4.0.20210824.002
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Secure3dResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'response_code3d_secure': 'str',
        'cardholder_info': 'str'
    }

    attribute_map = {
        'response_code3d_secure': 'responseCode3dSecure',
        'cardholder_info': 'cardholderInfo'
    }

    def __init__(self, response_code3d_secure=None, cardholder_info=None):  # noqa: E501
        """Secure3dResponse - a model defined in OpenAPI"""  # noqa: E501

        self._response_code3d_secure = None
        self._cardholder_info = None
        self.discriminator = None

        if response_code3d_secure is not None:
            self.response_code3d_secure = response_code3d_secure
        if cardholder_info is not None:
            self.cardholder_info = cardholder_info

    @property
    def response_code3d_secure(self):
        """Gets the response_code3d_secure of this Secure3dResponse.  # noqa: E501

        Code received after successful payer-auth verification.  # noqa: E501

        :return: The response_code3d_secure of this Secure3dResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_code3d_secure

    @response_code3d_secure.setter
    def response_code3d_secure(self, response_code3d_secure):
        """Sets the response_code3d_secure of this Secure3dResponse.

        Code received after successful payer-auth verification.  # noqa: E501

        :param response_code3d_secure: The response_code3d_secure of this Secure3dResponse.  # noqa: E501
        :type: str
        """

        self._response_code3d_secure = response_code3d_secure

    @property
    def cardholder_info(self):
        """Gets the cardholder_info of this Secure3dResponse.  # noqa: E501

        The cardholder's information supplied by the ACS.  # noqa: E501

        :return: The cardholder_info of this Secure3dResponse.  # noqa: E501
        :rtype: str
        """
        return self._cardholder_info

    @cardholder_info.setter
    def cardholder_info(self, cardholder_info):
        """Sets the cardholder_info of this Secure3dResponse.

        The cardholder's information supplied by the ACS.  # noqa: E501

        :param cardholder_info: The cardholder_info of this Secure3dResponse.  # noqa: E501
        :type: str
        """
        if cardholder_info is not None and len(cardholder_info) > 128:
            raise ValueError("Invalid value for `cardholder_info`, length must be less than or equal to `128`")  # noqa: E501

        self._cardholder_info = cardholder_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Secure3dResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
