# coding: utf-8

"""
    Payment Gateway API Specification.

    Payment Gateway API for payment processing. Version 6.4.0.20181018.001   # noqa: E501

    OpenAPI spec version: 6.4.0.20181018.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CardVerificationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'payment_card': 'PaymentCard',
        'billing_address': 'Address'
    }

    attribute_map = {
        'payment_card': 'paymentCard',
        'billing_address': 'billingAddress'
    }

    def __init__(self, payment_card=None, billing_address=None):  # noqa: E501
        """CardVerificationRequest - a model defined in OpenAPI"""  # noqa: E501

        self._payment_card = None
        self._billing_address = None
        self.discriminator = None

        self.payment_card = payment_card
        if billing_address is not None:
            self.billing_address = billing_address

    @property
    def payment_card(self):
        """Gets the payment_card of this CardVerificationRequest.  # noqa: E501


        :return: The payment_card of this CardVerificationRequest.  # noqa: E501
        :rtype: PaymentCard
        """
        return self._payment_card

    @payment_card.setter
    def payment_card(self, payment_card):
        """Sets the payment_card of this CardVerificationRequest.


        :param payment_card: The payment_card of this CardVerificationRequest.  # noqa: E501
        :type: PaymentCard
        """
        if payment_card is None:
            raise ValueError("Invalid value for `payment_card`, must not be `None`")  # noqa: E501

        self._payment_card = payment_card

    @property
    def billing_address(self):
        """Gets the billing_address of this CardVerificationRequest.  # noqa: E501


        :return: The billing_address of this CardVerificationRequest.  # noqa: E501
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CardVerificationRequest.


        :param billing_address: The billing_address of this CardVerificationRequest.  # noqa: E501
        :type: Address
        """

        self._billing_address = billing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardVerificationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
