# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.13.0.20200810.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BlockIPAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_address': 'str',
        'order_id': 'str',
    }

    attribute_map = {
        'ip_address': 'ipAddress',  # noqa: E501
        'order_id': 'orderId',  # noqa: E501
    }

    def __init__(self, ip_address=None, order_id=None):  # noqa: E501
        """BlockIPAddress - a model defined in OpenAPI



        Keyword Args:
            ip_address (str): Use this field to send IP address to be blocked.. [optional]  # noqa: E501
            order_id (str): Client order ID.. [optional]  # noqa: E501
        """

        self._ip_address = None
        self._order_id = None
        self.discriminator = None

        if ip_address is not None:
            self.ip_address = ip_address  # noqa: E501
        if order_id is not None:
            self.order_id = order_id  # noqa: E501

    @property
    def ip_address(self):
        """Gets the ip_address of this BlockIPAddress.  # noqa: E501

        Use this field to send IP address to be blocked.  # noqa: E501

        :return: The ip_address of this BlockIPAddress.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(
            self,
            ip_address):
        """Sets the ip_address of this BlockIPAddress.

        Use this field to send IP address to be blocked.  # noqa: E501

        :param ip_address: The ip_address of this BlockIPAddress.  # noqa: E501
        :type: str
        """

        self._ip_address = (
            ip_address)

    @property
    def order_id(self):
        """Gets the order_id of this BlockIPAddress.  # noqa: E501

        Client order ID.  # noqa: E501

        :return: The order_id of this BlockIPAddress.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(
            self,
            order_id):
        """Sets the order_id of this BlockIPAddress.

        Client order ID.  # noqa: E501

        :param order_id: The order_id of this BlockIPAddress.  # noqa: E501
        :type: str
        """

        self._order_id = (
            order_id)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockIPAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
