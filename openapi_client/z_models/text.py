# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.13.0.20200810.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Text(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'primary': 'Primary',
        'title': 'Title',
    }

    attribute_map = {
        'primary': 'primary',  # noqa: E501
        'title': 'title',  # noqa: E501
    }

    def __init__(self, primary=None, title=None):  # noqa: E501
        """Text - a model defined in OpenAPI



        Keyword Args:
            primary (Primary): [optional]  # noqa: E501
            title (Title): [optional]  # noqa: E501
        """

        self._primary = None
        self._title = None
        self.discriminator = None

        if primary is not None:
            self.primary = primary  # noqa: E501
        if title is not None:
            self.title = title  # noqa: E501

    @property
    def primary(self):
        """Gets the primary of this Text.  # noqa: E501


        :return: The primary of this Text.  # noqa: E501
        :rtype: Primary
        """
        return self._primary

    @primary.setter
    def primary(
            self,
            primary):
        """Sets the primary of this Text.


        :param primary: The primary of this Text.  # noqa: E501
        :type: Primary
        """

        self._primary = (
            primary)

    @property
    def title(self):
        """Gets the title of this Text.  # noqa: E501


        :return: The title of this Text.  # noqa: E501
        :rtype: Title
        """
        return self._title

    @title.setter
    def title(
            self,
            title):
        """Sets the title of this Text.


        :param title: The title of this Text.  # noqa: E501
        :type: Title
        """

        self._title = (
            title)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Text):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
