# coding: utf-8

"""
    Payment Gateway API Specification.

    The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.  # noqa: E501

    The version of the OpenAPI document: 6.13.0.20200810.001
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClassicMode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'background_color': 'BackgroundColor',
        'mobile': 'Mobile',
        'amount_title': 'FontProperties',
        'superscription': 'FontProperties',
        'individual_text': 'FontProperties',
        'label': 'FontProperties',
        'normal_text': 'FontProperties',
        'buttons': 'Properties',
        'anchor': 'Properties',
        'system_messages': 'Properties',
    }

    attribute_map = {
        'background_color': 'backgroundColor',  # noqa: E501
        'mobile': 'mobile',  # noqa: E501
        'amount_title': 'amountTitle',  # noqa: E501
        'superscription': 'superscription',  # noqa: E501
        'individual_text': 'individualText',  # noqa: E501
        'label': 'label',  # noqa: E501
        'normal_text': 'normalText',  # noqa: E501
        'buttons': 'buttons',  # noqa: E501
        'anchor': 'anchor',  # noqa: E501
        'system_messages': 'systemMessages',  # noqa: E501
    }

    def __init__(self, background_color=None, mobile=None, amount_title=None, superscription=None, individual_text=None, label=None, normal_text=None, buttons=None, anchor=None, system_messages=None):  # noqa: E501
        """ClassicMode - a model defined in OpenAPI



        Keyword Args:
            background_color (BackgroundColor): [optional]  # noqa: E501
            mobile (Mobile): [optional]  # noqa: E501
            amount_title (FontProperties): [optional]  # noqa: E501
            superscription (FontProperties): [optional]  # noqa: E501
            individual_text (FontProperties): [optional]  # noqa: E501
            label (FontProperties): [optional]  # noqa: E501
            normal_text (FontProperties): [optional]  # noqa: E501
            buttons (Properties): [optional]  # noqa: E501
            anchor (Properties): [optional]  # noqa: E501
            system_messages (Properties): [optional]  # noqa: E501
        """

        self._background_color = None
        self._mobile = None
        self._amount_title = None
        self._superscription = None
        self._individual_text = None
        self._label = None
        self._normal_text = None
        self._buttons = None
        self._anchor = None
        self._system_messages = None
        self.discriminator = None

        if background_color is not None:
            self.background_color = background_color  # noqa: E501
        if mobile is not None:
            self.mobile = mobile  # noqa: E501
        if amount_title is not None:
            self.amount_title = amount_title  # noqa: E501
        if superscription is not None:
            self.superscription = superscription  # noqa: E501
        if individual_text is not None:
            self.individual_text = individual_text  # noqa: E501
        if label is not None:
            self.label = label  # noqa: E501
        if normal_text is not None:
            self.normal_text = normal_text  # noqa: E501
        if buttons is not None:
            self.buttons = buttons  # noqa: E501
        if anchor is not None:
            self.anchor = anchor  # noqa: E501
        if system_messages is not None:
            self.system_messages = system_messages  # noqa: E501

    @property
    def background_color(self):
        """Gets the background_color of this ClassicMode.  # noqa: E501


        :return: The background_color of this ClassicMode.  # noqa: E501
        :rtype: BackgroundColor
        """
        return self._background_color

    @background_color.setter
    def background_color(
            self,
            background_color):
        """Sets the background_color of this ClassicMode.


        :param background_color: The background_color of this ClassicMode.  # noqa: E501
        :type: BackgroundColor
        """

        self._background_color = (
            background_color)

    @property
    def mobile(self):
        """Gets the mobile of this ClassicMode.  # noqa: E501


        :return: The mobile of this ClassicMode.  # noqa: E501
        :rtype: Mobile
        """
        return self._mobile

    @mobile.setter
    def mobile(
            self,
            mobile):
        """Sets the mobile of this ClassicMode.


        :param mobile: The mobile of this ClassicMode.  # noqa: E501
        :type: Mobile
        """

        self._mobile = (
            mobile)

    @property
    def amount_title(self):
        """Gets the amount_title of this ClassicMode.  # noqa: E501


        :return: The amount_title of this ClassicMode.  # noqa: E501
        :rtype: FontProperties
        """
        return self._amount_title

    @amount_title.setter
    def amount_title(
            self,
            amount_title):
        """Sets the amount_title of this ClassicMode.


        :param amount_title: The amount_title of this ClassicMode.  # noqa: E501
        :type: FontProperties
        """

        self._amount_title = (
            amount_title)

    @property
    def superscription(self):
        """Gets the superscription of this ClassicMode.  # noqa: E501


        :return: The superscription of this ClassicMode.  # noqa: E501
        :rtype: FontProperties
        """
        return self._superscription

    @superscription.setter
    def superscription(
            self,
            superscription):
        """Sets the superscription of this ClassicMode.


        :param superscription: The superscription of this ClassicMode.  # noqa: E501
        :type: FontProperties
        """

        self._superscription = (
            superscription)

    @property
    def individual_text(self):
        """Gets the individual_text of this ClassicMode.  # noqa: E501


        :return: The individual_text of this ClassicMode.  # noqa: E501
        :rtype: FontProperties
        """
        return self._individual_text

    @individual_text.setter
    def individual_text(
            self,
            individual_text):
        """Sets the individual_text of this ClassicMode.


        :param individual_text: The individual_text of this ClassicMode.  # noqa: E501
        :type: FontProperties
        """

        self._individual_text = (
            individual_text)

    @property
    def label(self):
        """Gets the label of this ClassicMode.  # noqa: E501


        :return: The label of this ClassicMode.  # noqa: E501
        :rtype: FontProperties
        """
        return self._label

    @label.setter
    def label(
            self,
            label):
        """Sets the label of this ClassicMode.


        :param label: The label of this ClassicMode.  # noqa: E501
        :type: FontProperties
        """

        self._label = (
            label)

    @property
    def normal_text(self):
        """Gets the normal_text of this ClassicMode.  # noqa: E501


        :return: The normal_text of this ClassicMode.  # noqa: E501
        :rtype: FontProperties
        """
        return self._normal_text

    @normal_text.setter
    def normal_text(
            self,
            normal_text):
        """Sets the normal_text of this ClassicMode.


        :param normal_text: The normal_text of this ClassicMode.  # noqa: E501
        :type: FontProperties
        """

        self._normal_text = (
            normal_text)

    @property
    def buttons(self):
        """Gets the buttons of this ClassicMode.  # noqa: E501


        :return: The buttons of this ClassicMode.  # noqa: E501
        :rtype: Properties
        """
        return self._buttons

    @buttons.setter
    def buttons(
            self,
            buttons):
        """Sets the buttons of this ClassicMode.


        :param buttons: The buttons of this ClassicMode.  # noqa: E501
        :type: Properties
        """

        self._buttons = (
            buttons)

    @property
    def anchor(self):
        """Gets the anchor of this ClassicMode.  # noqa: E501


        :return: The anchor of this ClassicMode.  # noqa: E501
        :rtype: Properties
        """
        return self._anchor

    @anchor.setter
    def anchor(
            self,
            anchor):
        """Sets the anchor of this ClassicMode.


        :param anchor: The anchor of this ClassicMode.  # noqa: E501
        :type: Properties
        """

        self._anchor = (
            anchor)

    @property
    def system_messages(self):
        """Gets the system_messages of this ClassicMode.  # noqa: E501


        :return: The system_messages of this ClassicMode.  # noqa: E501
        :rtype: Properties
        """
        return self._system_messages

    @system_messages.setter
    def system_messages(
            self,
            system_messages):
        """Sets the system_messages of this ClassicMode.


        :param system_messages: The system_messages of this ClassicMode.  # noqa: E501
        :type: Properties
        """

        self._system_messages = (
            system_messages)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassicMode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
