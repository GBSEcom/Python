# coding: utf-8

"""
    Payment Gateway API Specification

    Payment Gateway API for payment processing.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def perform_payment_post_authorisation(self, content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs):  # noqa: E501
        """Use this to capture/complete a transaction. Partial postauths are allowed.  # noqa: E501

        This can be used for postauth and partial postauths.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_payment_post_authorisation(content_type, client_request_id, api_key, timestamp, transaction_id, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param SecondaryTransaction payload: (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.perform_payment_post_authorisation_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_payment_post_authorisation_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs)  # noqa: E501
            return data

    def perform_payment_post_authorisation_with_http_info(self, content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs):  # noqa: E501
        """Use this to capture/complete a transaction. Partial postauths are allowed.  # noqa: E501

        This can be used for postauth and partial postauths.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_payment_post_authorisation_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param SecondaryTransaction payload: (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'client_request_id', 'api_key', 'timestamp', 'transaction_id', 'payload', 'message_signature', 'store_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_payment_post_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `perform_payment_post_authorisation`")  # noqa: E501
        # verify the required parameter 'client_request_id' is set
        if ('client_request_id' not in params or
                params['client_request_id'] is None):
            raise ValueError("Missing the required parameter `client_request_id` when calling `perform_payment_post_authorisation`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `perform_payment_post_authorisation`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `perform_payment_post_authorisation`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `perform_payment_post_authorisation`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `perform_payment_post_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_id' in params:
            path_params['transaction-id'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'store_id' in params:
            query_params.append(('storeId', params['store_id']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-Id'] = params['client_request_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501
        if 'timestamp' in params:
            header_params['Timestamp'] = params['timestamp']  # noqa: E501
        if 'message_signature' in params:
            header_params['Message-Signature'] = params['message_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/{transaction-id}/postauth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def primary_payment_transaction(self, content_type, client_request_id, api_key, timestamp, payload, **kwargs):  # noqa: E501
        """Generate a primary transaction  # noqa: E501

        Use this to originate a financial transaction, like a sale, preauthorization, or credit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.primary_payment_transaction(content_type, client_request_id, api_key, timestamp, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param PrimaryTransaction payload: Primary Transaction request (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.primary_payment_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.primary_payment_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, payload, **kwargs)  # noqa: E501
            return data

    def primary_payment_transaction_with_http_info(self, content_type, client_request_id, api_key, timestamp, payload, **kwargs):  # noqa: E501
        """Generate a primary transaction  # noqa: E501

        Use this to originate a financial transaction, like a sale, preauthorization, or credit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.primary_payment_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param PrimaryTransaction payload: Primary Transaction request (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'client_request_id', 'api_key', 'timestamp', 'payload', 'message_signature']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method primary_payment_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `primary_payment_transaction`")  # noqa: E501
        # verify the required parameter 'client_request_id' is set
        if ('client_request_id' not in params or
                params['client_request_id'] is None):
            raise ValueError("Missing the required parameter `client_request_id` when calling `primary_payment_transaction`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `primary_payment_transaction`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `primary_payment_transaction`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `primary_payment_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-Id'] = params['client_request_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501
        if 'timestamp' in params:
            header_params['Timestamp'] = params['timestamp']  # noqa: E501
        if 'message_signature' in params:
            header_params['Message-Signature'] = params['message_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def return_transaction(self, content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs):  # noqa: E501
        """Return/refund a transaction.  # noqa: E501

        Use this to return/refund an existing transaction.  Partial returns are allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.return_transaction(content_type, client_request_id, api_key, timestamp, transaction_id, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param SecondaryTransaction payload: (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.return_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.return_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs)  # noqa: E501
            return data

    def return_transaction_with_http_info(self, content_type, client_request_id, api_key, timestamp, transaction_id, payload, **kwargs):  # noqa: E501
        """Return/refund a transaction.  # noqa: E501

        Use this to return/refund an existing transaction.  Partial returns are allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.return_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, payload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param SecondaryTransaction payload: (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'client_request_id', 'api_key', 'timestamp', 'transaction_id', 'payload', 'message_signature', 'store_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method return_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `return_transaction`")  # noqa: E501
        # verify the required parameter 'client_request_id' is set
        if ('client_request_id' not in params or
                params['client_request_id'] is None):
            raise ValueError("Missing the required parameter `client_request_id` when calling `return_transaction`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `return_transaction`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `return_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `return_transaction`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `return_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_id' in params:
            path_params['transaction-id'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'store_id' in params:
            query_params.append(('storeId', params['store_id']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-Id'] = params['client_request_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501
        if 'timestamp' in params:
            header_params['Timestamp'] = params['timestamp']  # noqa: E501
        if 'message_signature' in params:
            header_params['Message-Signature'] = params['message_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/{transaction-id}/return', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transaction_inquiry(self, content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs):  # noqa: E501
        """Retrieve the state of a transaction  # noqa: E501

        Use this query to get the current state of an existing transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transaction_inquiry(content_type, client_request_id, api_key, timestamp, transaction_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.transaction_inquiry_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.transaction_inquiry_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs)  # noqa: E501
            return data

    def transaction_inquiry_with_http_info(self, content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs):  # noqa: E501
        """Retrieve the state of a transaction  # noqa: E501

        Use this query to get the current state of an existing transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transaction_inquiry_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'client_request_id', 'api_key', 'timestamp', 'transaction_id', 'message_signature', 'store_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_inquiry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `transaction_inquiry`")  # noqa: E501
        # verify the required parameter 'client_request_id' is set
        if ('client_request_id' not in params or
                params['client_request_id'] is None):
            raise ValueError("Missing the required parameter `client_request_id` when calling `transaction_inquiry`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `transaction_inquiry`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `transaction_inquiry`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `transaction_inquiry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_id' in params:
            path_params['transaction-id'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'store_id' in params:
            query_params.append(('storeId', params['store_id']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-Id'] = params['client_request_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501
        if 'timestamp' in params:
            header_params['Timestamp'] = params['timestamp']  # noqa: E501
        if 'message_signature' in params:
            header_params['Message-Signature'] = params['message_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/{transaction-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def void_transaction(self, content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs):  # noqa: E501
        """Reverse a previous action on an existing transaction  # noqa: E501

        Use this to reverse a postauth/completion, credit, preauth, or sale.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.void_transaction(content_type, client_request_id, api_key, timestamp, transaction_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.void_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.void_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs)  # noqa: E501
            return data

    def void_transaction_with_http_info(self, content_type, client_request_id, api_key, timestamp, transaction_id, **kwargs):  # noqa: E501
        """Reverse a previous action on an existing transaction  # noqa: E501

        Use this to reverse a postauth/completion, credit, preauth, or sale.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.void_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, transaction_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str content_type: content type (required)
        :param str client_request_id: A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format. (required)
        :param str api_key: (required)
        :param int timestamp: Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins). (required)
        :param str transaction_id: Gateway transaction identifier as returned in the parameter ipgTransactionId (required)
        :param str message_signature: Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
        :param str store_id: an optional outlet id for clients that support multiple store in the same developer app
        :return: TransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'client_request_id', 'api_key', 'timestamp', 'transaction_id', 'message_signature', 'store_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method void_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `void_transaction`")  # noqa: E501
        # verify the required parameter 'client_request_id' is set
        if ('client_request_id' not in params or
                params['client_request_id'] is None):
            raise ValueError("Missing the required parameter `client_request_id` when calling `void_transaction`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `void_transaction`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `void_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `void_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_id' in params:
            path_params['transaction-id'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'store_id' in params:
            query_params.append(('storeId', params['store_id']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_request_id' in params:
            header_params['Client-Request-Id'] = params['client_request_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501
        if 'timestamp' in params:
            header_params['Timestamp'] = params['timestamp']  # noqa: E501
        if 'message_signature' in params:
            header_params['Message-Signature'] = params['message_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/{transaction-id}/void', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
