# coding: utf-8

"""
    Payment Gateway API Specification

    Payment Gateway API for payment processing.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentSchedulesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_request_id': 'str',
        'api_trace_id': 'str',
        'transaction_status': 'str',
        'order_id': 'str'
    }

    attribute_map = {
        'client_request_id': 'clientRequestId',
        'api_trace_id': 'apiTraceId',
        'transaction_status': 'transactionStatus',
        'order_id': 'orderId'
    }

    def __init__(self, client_request_id=None, api_trace_id=None, transaction_status=None, order_id=None):  # noqa: E501
        """PaymentSchedulesResponse - a model defined in Swagger"""  # noqa: E501

        self._client_request_id = None
        self._api_trace_id = None
        self._transaction_status = None
        self._order_id = None
        self.discriminator = None

        self.client_request_id = client_request_id
        self.api_trace_id = api_trace_id
        self.transaction_status = transaction_status
        if order_id is not None:
            self.order_id = order_id

    @property
    def client_request_id(self):
        """Gets the client_request_id of this PaymentSchedulesResponse.  # noqa: E501

        Echoes back the value in the Request header for tracking.  # noqa: E501

        :return: The client_request_id of this PaymentSchedulesResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_request_id

    @client_request_id.setter
    def client_request_id(self, client_request_id):
        """Sets the client_request_id of this PaymentSchedulesResponse.

        Echoes back the value in the Request header for tracking.  # noqa: E501

        :param client_request_id: The client_request_id of this PaymentSchedulesResponse.  # noqa: E501
        :type: str
        """
        if client_request_id is None:
            raise ValueError("Invalid value for `client_request_id`, must not be `None`")  # noqa: E501

        self._client_request_id = client_request_id

    @property
    def api_trace_id(self):
        """Gets the api_trace_id of this PaymentSchedulesResponse.  # noqa: E501

        Request identifier in API, can be used to request logs from the support.  # noqa: E501

        :return: The api_trace_id of this PaymentSchedulesResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_trace_id

    @api_trace_id.setter
    def api_trace_id(self, api_trace_id):
        """Sets the api_trace_id of this PaymentSchedulesResponse.

        Request identifier in API, can be used to request logs from the support.  # noqa: E501

        :param api_trace_id: The api_trace_id of this PaymentSchedulesResponse.  # noqa: E501
        :type: str
        """
        if api_trace_id is None:
            raise ValueError("Invalid value for `api_trace_id`, must not be `None`")  # noqa: E501

        self._api_trace_id = api_trace_id

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PaymentSchedulesResponse.  # noqa: E501

        Result of requested operation. If it's anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.  # noqa: E501

        :return: The transaction_status of this PaymentSchedulesResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PaymentSchedulesResponse.

        Result of requested operation. If it's anything other than 'SUCCESS', please refer to 400s HTTP error codes or decline. See Error object for details.  # noqa: E501

        :param transaction_status: The transaction_status of this PaymentSchedulesResponse.  # noqa: E501
        :type: str
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")  # noqa: E501
        allowed_values = ["SUCCESS", "VALIDATION_FAILED", "PROCESSING_FAILED", "FAILURE"]  # noqa: E501
        if transaction_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_status` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_status, allowed_values)
            )

        self._transaction_status = transaction_status

    @property
    def order_id(self):
        """Gets the order_id of this PaymentSchedulesResponse.  # noqa: E501

        Client Order ID if supplied by client, otherwise the Order ID.  # noqa: E501

        :return: The order_id of this PaymentSchedulesResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentSchedulesResponse.

        Client Order ID if supplied by client, otherwise the Order ID.  # noqa: E501

        :param order_id: The order_id of this PaymentSchedulesResponse.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSchedulesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
