# coding: utf-8

"""
    Payment Gateway API Specification

    Payment Gateway API for payment processing.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.expiration import Expiration  # noqa: F401,E501
from swagger_client.models.payment_card_authentication_request import PaymentCardAuthenticationRequest  # noqa: F401,E501
from swagger_client.models.payment_card_authentication_result import PaymentCardAuthenticationResult  # noqa: F401,E501


class PaymentCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'expiry_date': 'Expiration',
        'security_code': 'str',
        'card_function': 'str',
        'cardholder_name': 'str',
        'authentication_request': 'PaymentCardAuthenticationRequest',
        'authentication_result': 'PaymentCardAuthenticationResult',
        'brand': 'str'
    }

    attribute_map = {
        'number': 'number',
        'expiry_date': 'expiryDate',
        'security_code': 'securityCode',
        'card_function': 'cardFunction',
        'cardholder_name': 'cardholderName',
        'authentication_request': 'authenticationRequest',
        'authentication_result': 'authenticationResult',
        'brand': 'brand'
    }

    def __init__(self, number=None, expiry_date=None, security_code=None, card_function='CREDIT', cardholder_name=None, authentication_request=None, authentication_result=None, brand=None):  # noqa: E501
        """PaymentCard - a model defined in Swagger"""  # noqa: E501

        self._number = None
        self._expiry_date = None
        self._security_code = None
        self._card_function = None
        self._cardholder_name = None
        self._authentication_request = None
        self._authentication_result = None
        self._brand = None
        self.discriminator = None

        self.number = number
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if security_code is not None:
            self.security_code = security_code
        if card_function is not None:
            self.card_function = card_function
        if cardholder_name is not None:
            self.cardholder_name = cardholder_name
        if authentication_request is not None:
            self.authentication_request = authentication_request
        if authentication_result is not None:
            self.authentication_result = authentication_result
        if brand is not None:
            self.brand = brand

    @property
    def number(self):
        """Gets the number of this PaymentCard.  # noqa: E501

        Payment card number  # noqa: E501

        :return: The number of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PaymentCard.

        Payment card number  # noqa: E501

        :param number: The number of this PaymentCard.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PaymentCard.  # noqa: E501


        :return: The expiry_date of this PaymentCard.  # noqa: E501
        :rtype: Expiration
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PaymentCard.


        :param expiry_date: The expiry_date of this PaymentCard.  # noqa: E501
        :type: Expiration
        """

        self._expiry_date = expiry_date

    @property
    def security_code(self):
        """Gets the security_code of this PaymentCard.  # noqa: E501

        CVV  # noqa: E501

        :return: The security_code of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this PaymentCard.

        CVV  # noqa: E501

        :param security_code: The security_code of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def card_function(self):
        """Gets the card_function of this PaymentCard.  # noqa: E501


        :return: The card_function of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._card_function

    @card_function.setter
    def card_function(self, card_function):
        """Sets the card_function of this PaymentCard.


        :param card_function: The card_function of this PaymentCard.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if card_function not in allowed_values:
            raise ValueError(
                "Invalid value for `card_function` ({0}), must be one of {1}"  # noqa: E501
                .format(card_function, allowed_values)
            )

        self._card_function = card_function

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PaymentCard.  # noqa: E501


        :return: The cardholder_name of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PaymentCard.


        :param cardholder_name: The cardholder_name of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._cardholder_name = cardholder_name

    @property
    def authentication_request(self):
        """Gets the authentication_request of this PaymentCard.  # noqa: E501


        :return: The authentication_request of this PaymentCard.  # noqa: E501
        :rtype: PaymentCardAuthenticationRequest
        """
        return self._authentication_request

    @authentication_request.setter
    def authentication_request(self, authentication_request):
        """Sets the authentication_request of this PaymentCard.


        :param authentication_request: The authentication_request of this PaymentCard.  # noqa: E501
        :type: PaymentCardAuthenticationRequest
        """

        self._authentication_request = authentication_request

    @property
    def authentication_result(self):
        """Gets the authentication_result of this PaymentCard.  # noqa: E501


        :return: The authentication_result of this PaymentCard.  # noqa: E501
        :rtype: PaymentCardAuthenticationResult
        """
        return self._authentication_result

    @authentication_result.setter
    def authentication_result(self, authentication_result):
        """Sets the authentication_result of this PaymentCard.


        :param authentication_result: The authentication_result of this PaymentCard.  # noqa: E501
        :type: PaymentCardAuthenticationResult
        """

        self._authentication_result = authentication_result

    @property
    def brand(self):
        """Gets the brand of this PaymentCard.  # noqa: E501

        Optional, required only if using dual branded card  # noqa: E501

        :return: The brand of this PaymentCard.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PaymentCard.

        Optional, required only if using dual branded card  # noqa: E501

        :param brand: The brand of this PaymentCard.  # noqa: E501
        :type: str
        """

        self._brand = brand

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
