# coding: utf-8

"""
    Payment Gateway API Specification

    Payment Gateway API for payment processing.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.amount import Amount  # noqa: F401,E501
from swagger_client.models.client_locale import ClientLocale  # noqa: F401,E501


class PaymentUrlRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_id': 'str',
        'client_locale': 'ClientLocale',
        'amount': 'Amount',
        'order_id': 'str'
    }

    attribute_map = {
        'store_id': 'storeId',
        'client_locale': 'clientLocale',
        'amount': 'amount',
        'order_id': 'orderId'
    }

    def __init__(self, store_id=None, client_locale=None, amount=None, order_id=None):  # noqa: E501
        """PaymentUrlRequest - a model defined in Swagger"""  # noqa: E501

        self._store_id = None
        self._client_locale = None
        self._amount = None
        self._order_id = None
        self.discriminator = None

        self.store_id = store_id
        if client_locale is not None:
            self.client_locale = client_locale
        self.amount = amount
        self.order_id = order_id

    @property
    def store_id(self):
        """Gets the store_id of this PaymentUrlRequest.  # noqa: E501

        An optional outlet id for clients that support multiple store in the same developer app.  # noqa: E501

        :return: The store_id of this PaymentUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this PaymentUrlRequest.

        An optional outlet id for clients that support multiple store in the same developer app.  # noqa: E501

        :param store_id: The store_id of this PaymentUrlRequest.  # noqa: E501
        :type: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")  # noqa: E501

        self._store_id = store_id

    @property
    def client_locale(self):
        """Gets the client_locale of this PaymentUrlRequest.  # noqa: E501


        :return: The client_locale of this PaymentUrlRequest.  # noqa: E501
        :rtype: ClientLocale
        """
        return self._client_locale

    @client_locale.setter
    def client_locale(self, client_locale):
        """Sets the client_locale of this PaymentUrlRequest.


        :param client_locale: The client_locale of this PaymentUrlRequest.  # noqa: E501
        :type: ClientLocale
        """

        self._client_locale = client_locale

    @property
    def amount(self):
        """Gets the amount of this PaymentUrlRequest.  # noqa: E501


        :return: The amount of this PaymentUrlRequest.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentUrlRequest.


        :param amount: The amount of this PaymentUrlRequest.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def order_id(self):
        """Gets the order_id of this PaymentUrlRequest.  # noqa: E501

        Client Order ID if supplied by client, otherwise the Order ID.  # noqa: E501

        :return: The order_id of this PaymentUrlRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentUrlRequest.

        Client Order ID if supplied by client, otherwise the Order ID.  # noqa: E501

        :param order_id: The order_id of this PaymentUrlRequest.  # noqa: E501
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentUrlRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
