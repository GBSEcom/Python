# coding: utf-8

"""
    Payment Gateway API Specification

    Payment Gateway API for payment processing.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.installment_options import InstallmentOptions  # noqa: F401,E501


class PrimaryTransactionAdditionalDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_number': 'str',
        'comments': 'str',
        'dynamic_merchant_name': 'str',
        'invoice_number': 'str',
        'purchase_order_number': 'str',
        'recurring_type': 'str',
        'installment_options': 'InstallmentOptions'
    }

    attribute_map = {
        'reference_number': 'referenceNumber',
        'comments': 'comments',
        'dynamic_merchant_name': 'dynamicMerchantName',
        'invoice_number': 'invoiceNumber',
        'purchase_order_number': 'purchaseOrderNumber',
        'recurring_type': 'recurringType',
        'installment_options': 'installmentOptions'
    }

    def __init__(self, reference_number=None, comments=None, dynamic_merchant_name=None, invoice_number=None, purchase_order_number=None, recurring_type=None, installment_options=None):  # noqa: E501
        """PrimaryTransactionAdditionalDetails - a model defined in Swagger"""  # noqa: E501

        self._reference_number = None
        self._comments = None
        self._dynamic_merchant_name = None
        self._invoice_number = None
        self._purchase_order_number = None
        self._recurring_type = None
        self._installment_options = None
        self.discriminator = None

        if reference_number is not None:
            self.reference_number = reference_number
        if comments is not None:
            self.comments = comments
        if dynamic_merchant_name is not None:
            self.dynamic_merchant_name = dynamic_merchant_name
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if recurring_type is not None:
            self.recurring_type = recurring_type
        if installment_options is not None:
            self.installment_options = installment_options

    @property
    def reference_number(self):
        """Gets the reference_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501

        For FORCED_TICKET only. Stores the six digit reference number you have received as the result of a successful external authorization (e.g. by phone). The Gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.]   # noqa: E501

        :return: The reference_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this PrimaryTransactionAdditionalDetails.

        For FORCED_TICKET only. Stores the six digit reference number you have received as the result of a successful external authorization (e.g. by phone). The Gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.]   # noqa: E501

        :param reference_number: The reference_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: str
        """

        self._reference_number = reference_number

    @property
    def comments(self):
        """Gets the comments of this PrimaryTransactionAdditionalDetails.  # noqa: E501


        :return: The comments of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PrimaryTransactionAdditionalDetails.


        :param comments: The comments of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def dynamic_merchant_name(self):
        """Gets the dynamic_merchant_name of this PrimaryTransactionAdditionalDetails.  # noqa: E501


        :return: The dynamic_merchant_name of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_merchant_name

    @dynamic_merchant_name.setter
    def dynamic_merchant_name(self, dynamic_merchant_name):
        """Sets the dynamic_merchant_name of this PrimaryTransactionAdditionalDetails.


        :param dynamic_merchant_name: The dynamic_merchant_name of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: str
        """

        self._dynamic_merchant_name = dynamic_merchant_name

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501


        :return: The invoice_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PrimaryTransactionAdditionalDetails.


        :param invoice_number: The invoice_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501


        :return: The purchase_order_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this PrimaryTransactionAdditionalDetails.


        :param purchase_order_number: The purchase_order_number of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def recurring_type(self):
        """Gets the recurring_type of this PrimaryTransactionAdditionalDetails.  # noqa: E501

        Valid values are 'FIRST', 'REPEAT' and 'STANDING_INSTRUCTION'.  # noqa: E501

        :return: The recurring_type of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._recurring_type

    @recurring_type.setter
    def recurring_type(self, recurring_type):
        """Sets the recurring_type of this PrimaryTransactionAdditionalDetails.

        Valid values are 'FIRST', 'REPEAT' and 'STANDING_INSTRUCTION'.  # noqa: E501

        :param recurring_type: The recurring_type of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: str
        """

        self._recurring_type = recurring_type

    @property
    def installment_options(self):
        """Gets the installment_options of this PrimaryTransactionAdditionalDetails.  # noqa: E501


        :return: The installment_options of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :rtype: InstallmentOptions
        """
        return self._installment_options

    @installment_options.setter
    def installment_options(self, installment_options):
        """Sets the installment_options of this PrimaryTransactionAdditionalDetails.


        :param installment_options: The installment_options of this PrimaryTransactionAdditionalDetails.  # noqa: E501
        :type: InstallmentOptions
        """

        self._installment_options = installment_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimaryTransactionAdditionalDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
